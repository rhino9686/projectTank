#include "mytimer.h"

void MYTIMER_init(void)
{
    // we don't have to do anything.
}

void MYTIMER_enable(void)
{
    MYTIMER->control |= MYTIMER_ENABLE_MASK;
}

void MYTIMER_disable(void)
{
    MYTIMER->control &= ~MYTIMER_ENABLE_MASK;
}

void MYTIMER_setOverflowVal(uint32_t value)
{
	// Yes it's inefficient, but it's written this way to
	// show you the C to assembly mapping.
    uint32_t * timerAddr = (uint32_t*)(MYTIMER);
    *timerAddr = value; // overflowReg is at offset 0x0
}

uint32_t MYTIMER_getCounterVal(void)
{

// Yes it's inefficient, but it's written this way to
// show you the C to assembly mapping.
    uint32_t * timerAddr = (uint32_t*)(MYTIMER);
    return *(timerAddr+1); // counterReg is at offset 0x4
}

void MYTIMER_enable_allInterrupts(void){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	*(timerAddr + 2) |= 0xF;
}

void MYTIMER_disable_allInterrupts(void){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	*(timerAddr + 2) &= 0;
}

void MYTIMER_enable_compareInt(void){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	*(timerAddr + 2) |= 0x4;
}

void MYTIMER_disable_compareInt(void){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	*(timerAddr + 2) &= 0xB;
}

void MYTIMER_setCompareVal(uint32_t compare){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	*(timerAddr + 3) = compare;
}

void MYTIMER_enable_overflowInt(void){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	*(timerAddr + 2) |= 0x8;
}

void MYTIMER_disable_overflowInt(void){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	*(timerAddr + 2) &= 0x7;
}

uint32_t MYTIMER_getInterrupt_status(void){
	uint32_t * timerAddr = (uint32_t*)(MYTIMER);
	return *(timerAddr + 4);
}


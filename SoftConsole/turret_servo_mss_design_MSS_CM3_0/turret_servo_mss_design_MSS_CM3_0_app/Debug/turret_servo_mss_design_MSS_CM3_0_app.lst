
turret_servo_mss_design_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001940  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  20001940  20001940  00009940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000124  20001944  20001944  00009944  2**2
                  ALLOC
  3 .stack        00003000  20001a68  20001a68  00009944  2**0
                  ALLOC
  4 .comment      000000ac  00000000  00000000  00009944  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000099f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000042a  00000000  00000000  00009be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002c50  00000000  00000000  0000a012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000614  00000000  00000000  0000cc62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000138c  00000000  00000000  0000d276  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006c0  00000000  00000000  0000e604  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000019be  00000000  00000000  0000ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000abc  00000000  00000000  00010682  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0001a979  00000000  00000000  0001113e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0002bab7  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000001d8  00000000  00000000  0002badc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20001799 	.word	0x20001799
20000074:	200017c5 	.word	0x200017c5
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	20000515 	.word	0x20000515
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>
20000332:	e7fe      	b.n	20000332 <UART1_IRQHandler+0x2>
20000334:	e7fe      	b.n	20000334 <UART1_IRQHandler+0x4>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>
2000034c:	e7fe      	b.n	2000034c <CommError_IRQHandler+0x2>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	200017f1 	.word	0x200017f1
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20001940 	.word	0x20001940
20000450:	20001940 	.word	0x20001940
20000454:	20001940 	.word	0x20001940
20000458:	20001944 	.word	0x20001944
2000045c:	00000000 	.word	0x00000000
20000460:	20001944 	.word	0x20001944
20000464:	20001a68 	.word	0x20001a68
20000468:	200017fd 	.word	0x200017fd
2000046c:	20000559 	.word	0x20000559

20000470 <__do_global_dtors_aux>:
20000470:	f641 1344 	movw	r3, #6468	; 0x1944
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f641 1040 	movw	r0, #6464	; 0x1940
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200004a0:	b480      	push	{r7}
200004a2:	b083      	sub	sp, #12
200004a4:	af00      	add	r7, sp, #0
200004a6:	4603      	mov	r3, r0
200004a8:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200004aa:	f24e 1300 	movw	r3, #57600	; 0xe100
200004ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004b6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200004ba:	88f9      	ldrh	r1, [r7, #6]
200004bc:	f001 011f 	and.w	r1, r1, #31
200004c0:	f04f 0001 	mov.w	r0, #1
200004c4:	fa00 f101 	lsl.w	r1, r0, r1
200004c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200004cc:	f107 070c 	add.w	r7, r7, #12
200004d0:	46bd      	mov	sp, r7
200004d2:	bc80      	pop	{r7}
200004d4:	4770      	bx	lr
200004d6:	bf00      	nop

200004d8 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200004d8:	b480      	push	{r7}
200004da:	b083      	sub	sp, #12
200004dc:	af00      	add	r7, sp, #0
200004de:	4603      	mov	r3, r0
200004e0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200004e2:	f24e 1300 	movw	r3, #57600	; 0xe100
200004e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004ee:	ea4f 1252 	mov.w	r2, r2, lsr #5
200004f2:	88f9      	ldrh	r1, [r7, #6]
200004f4:	f001 011f 	and.w	r1, r1, #31
200004f8:	f04f 0001 	mov.w	r0, #1
200004fc:	fa00 f101 	lsl.w	r1, r0, r1
20000500:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000508:	f107 070c 	add.w	r7, r7, #12
2000050c:	46bd      	mov	sp, r7
2000050e:	bc80      	pop	{r7}
20000510:	4770      	bx	lr
20000512:	bf00      	nop

20000514 <Fabric_IRQHandler>:

void setupSPI(void);

int hits = 0;
__attribute__ ((interrupt)) void Fabric_IRQHandler( void )
{
20000514:	4668      	mov	r0, sp
20000516:	f020 0107 	bic.w	r1, r0, #7
2000051a:	468d      	mov	sp, r1
2000051c:	b581      	push	{r0, r7, lr}
2000051e:	b083      	sub	sp, #12
20000520:	af00      	add	r7, sp, #0
	volatile uint32_t * hitsAddr = (volatile uint32_t *)(HITS_ADDR);
20000522:	f240 0324 	movw	r3, #36	; 0x24
20000526:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000052a:	603b      	str	r3, [r7, #0]
	uint32_t hits = *hitsAddr;
2000052c:	683b      	ldr	r3, [r7, #0]
2000052e:	681b      	ldr	r3, [r3, #0]
20000530:	607b      	str	r3, [r7, #4]
	hits++;
20000532:	687b      	ldr	r3, [r7, #4]
20000534:	f103 0301 	add.w	r3, r3, #1
20000538:	607b      	str	r3, [r7, #4]
	*hitsAddr = hits;
2000053a:	683b      	ldr	r3, [r7, #0]
2000053c:	687a      	ldr	r2, [r7, #4]
2000053e:	601a      	str	r2, [r3, #0]
    NVIC_ClearPendingIRQ( Fabric_IRQn );
20000540:	f04f 001f 	mov.w	r0, #31
20000544:	f7ff ffc8 	bl	200004d8 <NVIC_ClearPendingIRQ>
}
20000548:	f107 070c 	add.w	r7, r7, #12
2000054c:	46bd      	mov	sp, r7
2000054e:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
20000552:	4685      	mov	sp, r0
20000554:	4770      	bx	lr
20000556:	bf00      	nop

20000558 <main>:

int main()
{
20000558:	b580      	push	{r7, lr}
2000055a:	b08e      	sub	sp, #56	; 0x38
2000055c:	af02      	add	r7, sp, #8
	volatile uint32_t * rlAddr = (volatile uint32_t *)(0x40050010); // Right/Left Servo
2000055e:	f240 0310 	movw	r3, #16
20000562:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000566:	603b      	str	r3, [r7, #0]
	volatile uint32_t * udAddr = (volatile uint32_t *)(0x40050014); // Up/Down Servo
20000568:	f240 0314 	movw	r3, #20
2000056c:	f2c4 0305 	movt	r3, #16389	; 0x4005
20000570:	607b      	str	r3, [r7, #4]
	volatile uint32_t * freqAddr = (volatile uint32_t *)(FREQ_ADDR);
20000572:	f240 0320 	movw	r3, #32
20000576:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000057a:	60bb      	str	r3, [r7, #8]

	// Enable FABINT
	NVIC_EnableIRQ(Fabric_IRQn);
2000057c:	f04f 001f 	mov.w	r0, #31
20000580:	f7ff ff8e 	bl	200004a0 <NVIC_EnableIRQ>

	uint32_t udPos = 900000; // Start at 90 deg. (middle position)
20000584:	f64b 33a0 	movw	r3, #48032	; 0xbba0
20000588:	f2c0 030d 	movt	r3, #13
2000058c:	60fb      	str	r3, [r7, #12]
	uint32_t rlPos = 0;
2000058e:	f04f 0300 	mov.w	r3, #0
20000592:	613b      	str	r3, [r7, #16]

	// Initialize servo positions
	*udAddr = udPos;
20000594:	687b      	ldr	r3, [r7, #4]
20000596:	68fa      	ldr	r2, [r7, #12]
20000598:	601a      	str	r2, [r3, #0]
	*rlAddr = rlPos;
2000059a:	683b      	ldr	r3, [r7, #0]
2000059c:	693a      	ldr	r2, [r7, #16]
2000059e:	601a      	str	r2, [r3, #0]

	//Setup SPI stuff
	setupSPI();
200005a0:	f000 f952 	bl	20000848 <setupSPI>

	//Full Polling: put in while 1 loop
	while(1) {
		
		master_tx_buffer[0] = 0x80;
200005a4:	f641 1354 	movw	r3, #6484	; 0x1954
200005a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005ac:	f06f 027f 	mvn.w	r2, #127	; 0x7f
200005b0:	701a      	strb	r2, [r3, #0]
		master_tx_buffer[1] = 0x42;
200005b2:	f641 1354 	movw	r3, #6484	; 0x1954
200005b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005ba:	f04f 0242 	mov.w	r2, #66	; 0x42
200005be:	705a      	strb	r2, [r3, #1]
		master_tx_buffer[2] = 0x00;
200005c0:	f641 1354 	movw	r3, #6484	; 0x1954
200005c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005c8:	f04f 0200 	mov.w	r2, #0
200005cc:	709a      	strb	r2, [r3, #2]
		master_tx_buffer[3] = 0x00;
200005ce:	f641 1354 	movw	r3, #6484	; 0x1954
200005d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005d6:	f04f 0200 	mov.w	r2, #0
200005da:	70da      	strb	r2, [r3, #3]
		master_tx_buffer[4] = 0x00;
200005dc:	f641 1354 	movw	r3, #6484	; 0x1954
200005e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005e4:	f04f 0200 	mov.w	r2, #0
200005e8:	711a      	strb	r2, [r3, #4]
		master_tx_buffer[5] = 0x00;
200005ea:	f641 1354 	movw	r3, #6484	; 0x1954
200005ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005f2:	f04f 0200 	mov.w	r2, #0
200005f6:	715a      	strb	r2, [r3, #5]
		master_tx_buffer[6] = 0x00;
200005f8:	f641 1354 	movw	r3, #6484	; 0x1954
200005fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000600:	f04f 0200 	mov.w	r2, #0
20000604:	719a      	strb	r2, [r3, #6]
		master_tx_buffer[7] = 0x00;
20000606:	f641 1354 	movw	r3, #6484	; 0x1954
2000060a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000060e:	f04f 0200 	mov.w	r2, #0
20000612:	71da      	strb	r2, [r3, #7]
		master_tx_buffer[8] = 0x00;
20000614:	f641 1354 	movw	r3, #6484	; 0x1954
20000618:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000061c:	f04f 0200 	mov.w	r2, #0
20000620:	721a      	strb	r2, [r3, #8]

		MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000622:	f641 1060 	movw	r0, #6496	; 0x1960
20000626:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000062a:	f04f 0100 	mov.w	r1, #0
2000062e:	f000 fcb5 	bl	20000f9c <MSS_SPI_set_slave_select>
		MSS_SPI_transfer_block
20000632:	f04f 0306 	mov.w	r3, #6
20000636:	9300      	str	r3, [sp, #0]
20000638:	f641 1060 	movw	r0, #6496	; 0x1960
2000063c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000640:	f641 1154 	movw	r1, #6484	; 0x1954
20000644:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000648:	f04f 0203 	mov.w	r2, #3
2000064c:	f641 1348 	movw	r3, #6472	; 0x1948
20000650:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000654:	f000 fd6e 	bl	20001134 <MSS_SPI_transfer_block>
			3, 	//3 bytes of command
			&master_rx_buffer,
			6 	//6 bytes of command
		);

		MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000658:	f641 1060 	movw	r0, #6496	; 0x1960
2000065c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000660:	f04f 0100 	mov.w	r1, #0
20000664:	f000 fd1e 	bl	200010a4 <MSS_SPI_clear_slave_select>

		int up = (master_rx_buffer[1] & (1 << 4)) != 0;
20000668:	f641 1348 	movw	r3, #6472	; 0x1948
2000066c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000670:	785b      	ldrb	r3, [r3, #1]
20000672:	f003 0310 	and.w	r3, r3, #16
20000676:	2b00      	cmp	r3, #0
20000678:	bf0c      	ite	eq
2000067a:	2300      	moveq	r3, #0
2000067c:	2301      	movne	r3, #1
2000067e:	617b      	str	r3, [r7, #20]
		int down = (master_rx_buffer[1] & (1 << 6)) != 0;
20000680:	f641 1348 	movw	r3, #6472	; 0x1948
20000684:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000688:	785b      	ldrb	r3, [r3, #1]
2000068a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000068e:	2b00      	cmp	r3, #0
20000690:	bf0c      	ite	eq
20000692:	2300      	moveq	r3, #0
20000694:	2301      	movne	r3, #1
20000696:	61bb      	str	r3, [r7, #24]
		int left = (master_rx_buffer[1] & (1 << 5)) != 0;
20000698:	f641 1348 	movw	r3, #6472	; 0x1948
2000069c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006a0:	785b      	ldrb	r3, [r3, #1]
200006a2:	f003 0320 	and.w	r3, r3, #32
200006a6:	2b00      	cmp	r3, #0
200006a8:	bf0c      	ite	eq
200006aa:	2300      	moveq	r3, #0
200006ac:	2301      	movne	r3, #1
200006ae:	61fb      	str	r3, [r7, #28]
		int right = (master_rx_buffer[1] & (1 << 7)) != 0;
200006b0:	f641 1348 	movw	r3, #6472	; 0x1948
200006b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006b8:	785b      	ldrb	r3, [r3, #1]
200006ba:	b25b      	sxtb	r3, r3
200006bc:	ea4f 73d3 	mov.w	r3, r3, lsr #31
200006c0:	623b      	str	r3, [r7, #32]
		int fire = (master_rx_buffer[1] & (1 << 1)) != 0;
200006c2:	f641 1348 	movw	r3, #6472	; 0x1948
200006c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006ca:	785b      	ldrb	r3, [r3, #1]
200006cc:	f003 0302 	and.w	r3, r3, #2
200006d0:	2b00      	cmp	r3, #0
200006d2:	bf0c      	ite	eq
200006d4:	2300      	moveq	r3, #0
200006d6:	2301      	movne	r3, #1
200006d8:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t LED = 0;
200006da:	f04f 0300 	mov.w	r3, #0
200006de:	62bb      	str	r3, [r7, #40]	; 0x28

		//UP/DOWN LOGIC
		if (up == 0 && down) { //UP
200006e0:	697b      	ldr	r3, [r7, #20]
200006e2:	2b00      	cmp	r3, #0
200006e4:	d122      	bne.n	2000072c <main+0x1d4>
200006e6:	69bb      	ldr	r3, [r7, #24]
200006e8:	2b00      	cmp	r3, #0
200006ea:	d01f      	beq.n	2000072c <main+0x1d4>
			if (udPos == 1200000){ // At max, stay
200006ec:	68fa      	ldr	r2, [r7, #12]
200006ee:	f644 7380 	movw	r3, #20352	; 0x4f80
200006f2:	f2c0 0312 	movt	r3, #18
200006f6:	429a      	cmp	r2, r3
200006f8:	d104      	bne.n	20000704 <main+0x1ac>
				*udAddr = 1200000 / 1000;
200006fa:	687b      	ldr	r3, [r7, #4]
200006fc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
20000700:	601a      	str	r2, [r3, #0]
20000702:	e00e      	b.n	20000722 <main+0x1ca>
			} 
			else {
				udPos += 100;
20000704:	68fb      	ldr	r3, [r7, #12]
20000706:	f103 0364 	add.w	r3, r3, #100	; 0x64
2000070a:	60fb      	str	r3, [r7, #12]
				*udAddr = udPos / 1000; // Divide by 1000 for smoother turning
2000070c:	68fa      	ldr	r2, [r7, #12]
2000070e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20000712:	f2c1 0362 	movt	r3, #4194	; 0x1062
20000716:	fba3 1302 	umull	r1, r3, r3, r2
2000071a:	ea4f 1293 	mov.w	r2, r3, lsr #6
2000071e:	687b      	ldr	r3, [r7, #4]
20000720:	601a      	str	r2, [r3, #0]
			}
			LED += 1;
20000722:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000724:	f103 0301 	add.w	r3, r3, #1
20000728:	62bb      	str	r3, [r7, #40]	; 0x28
		int fire = (master_rx_buffer[1] & (1 << 1)) != 0;

		uint32_t LED = 0;

		//UP/DOWN LOGIC
		if (up == 0 && down) { //UP
2000072a:	e024      	b.n	20000776 <main+0x21e>
				udPos += 100;
				*udAddr = udPos / 1000; // Divide by 1000 for smoother turning
			}
			LED += 1;
		} 
		else if (down == 0 && up) { // down
2000072c:	69bb      	ldr	r3, [r7, #24]
2000072e:	2b00      	cmp	r3, #0
20000730:	d121      	bne.n	20000776 <main+0x21e>
20000732:	697b      	ldr	r3, [r7, #20]
20000734:	2b00      	cmp	r3, #0
20000736:	d01e      	beq.n	20000776 <main+0x21e>
			if (udPos == 600000){ // At min, stay
20000738:	68fa      	ldr	r2, [r7, #12]
2000073a:	f242 73c0 	movw	r3, #10176	; 0x27c0
2000073e:	f2c0 0309 	movt	r3, #9
20000742:	429a      	cmp	r2, r3
20000744:	d104      	bne.n	20000750 <main+0x1f8>
				*udAddr = 600000 / 1000;
20000746:	687b      	ldr	r3, [r7, #4]
20000748:	f44f 7216 	mov.w	r2, #600	; 0x258
2000074c:	601a      	str	r2, [r3, #0]
2000074e:	e00e      	b.n	2000076e <main+0x216>
			} 
			else {
				udPos -= 100;
20000750:	68fb      	ldr	r3, [r7, #12]
20000752:	f1a3 0364 	sub.w	r3, r3, #100	; 0x64
20000756:	60fb      	str	r3, [r7, #12]
				*udAddr = udPos / 1000;
20000758:	68fa      	ldr	r2, [r7, #12]
2000075a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
2000075e:	f2c1 0362 	movt	r3, #4194	; 0x1062
20000762:	fba3 1302 	umull	r1, r3, r3, r2
20000766:	ea4f 1293 	mov.w	r2, r3, lsr #6
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	601a      	str	r2, [r3, #0]
			}
			LED += 2;
2000076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000770:	f103 0302 	add.w	r3, r3, #2
20000774:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		// LEFT/RIGHT
		if (left == 0 && right) { //LEFT
20000776:	69fb      	ldr	r3, [r7, #28]
20000778:	2b00      	cmp	r3, #0
2000077a:	d11e      	bne.n	200007ba <main+0x262>
2000077c:	6a3b      	ldr	r3, [r7, #32]
2000077e:	2b00      	cmp	r3, #0
20000780:	d01b      	beq.n	200007ba <main+0x262>
			if (rlPos == 0){ // At min, stay
20000782:	693b      	ldr	r3, [r7, #16]
20000784:	2b00      	cmp	r3, #0
20000786:	d104      	bne.n	20000792 <main+0x23a>
				*rlAddr = 0;
20000788:	683b      	ldr	r3, [r7, #0]
2000078a:	f04f 0200 	mov.w	r2, #0
2000078e:	601a      	str	r2, [r3, #0]
20000790:	e00e      	b.n	200007b0 <main+0x258>
			} 
			else {
				rlPos -= 100;
20000792:	693b      	ldr	r3, [r7, #16]
20000794:	f1a3 0364 	sub.w	r3, r3, #100	; 0x64
20000798:	613b      	str	r3, [r7, #16]
				*rlAddr = rlPos / 1000;
2000079a:	693a      	ldr	r2, [r7, #16]
2000079c:	f644 53d3 	movw	r3, #19923	; 0x4dd3
200007a0:	f2c1 0362 	movt	r3, #4194	; 0x1062
200007a4:	fba3 1302 	umull	r1, r3, r3, r2
200007a8:	ea4f 1293 	mov.w	r2, r3, lsr #6
200007ac:	683b      	ldr	r3, [r7, #0]
200007ae:	601a      	str	r2, [r3, #0]
			}
			LED += 4;
200007b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200007b2:	f103 0304 	add.w	r3, r3, #4
200007b6:	62bb      	str	r3, [r7, #40]	; 0x28
				*udAddr = udPos / 1000;
			}
			LED += 2;
		}
		// LEFT/RIGHT
		if (left == 0 && right) { //LEFT
200007b8:	e024      	b.n	20000804 <main+0x2ac>
				rlPos -= 100;
				*rlAddr = rlPos / 1000;
			}
			LED += 4;
		} 
		else if (right == 0 && left) { //RIGHT
200007ba:	6a3b      	ldr	r3, [r7, #32]
200007bc:	2b00      	cmp	r3, #0
200007be:	d121      	bne.n	20000804 <main+0x2ac>
200007c0:	69fb      	ldr	r3, [r7, #28]
200007c2:	2b00      	cmp	r3, #0
200007c4:	d01e      	beq.n	20000804 <main+0x2ac>
			if (rlPos == 1800000){ // At max, stay
200007c6:	693a      	ldr	r2, [r7, #16]
200007c8:	f247 7340 	movw	r3, #30528	; 0x7740
200007cc:	f2c0 031b 	movt	r3, #27
200007d0:	429a      	cmp	r2, r3
200007d2:	d104      	bne.n	200007de <main+0x286>
				*rlAddr = 1800000 / 1000;
200007d4:	683b      	ldr	r3, [r7, #0]
200007d6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
200007da:	601a      	str	r2, [r3, #0]
200007dc:	e00e      	b.n	200007fc <main+0x2a4>
			} 
			else {
				rlPos += 100;
200007de:	693b      	ldr	r3, [r7, #16]
200007e0:	f103 0364 	add.w	r3, r3, #100	; 0x64
200007e4:	613b      	str	r3, [r7, #16]
				*rlAddr = rlPos / 1000; // Divide by 1000 for smoother turning
200007e6:	693a      	ldr	r2, [r7, #16]
200007e8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
200007ec:	f2c1 0362 	movt	r3, #4194	; 0x1062
200007f0:	fba3 1302 	umull	r1, r3, r3, r2
200007f4:	ea4f 1293 	mov.w	r2, r3, lsr #6
200007f8:	683b      	ldr	r3, [r7, #0]
200007fa:	601a      	str	r2, [r3, #0]
			}
			LED += 8;
200007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200007fe:	f103 0308 	add.w	r3, r3, #8
20000802:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		// Shoot
		if (fire == 0){
20000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000806:	2b00      	cmp	r3, #0
20000808:	d108      	bne.n	2000081c <main+0x2c4>
			*freqAddr = 56;
2000080a:	68bb      	ldr	r3, [r7, #8]
2000080c:	f04f 0238 	mov.w	r2, #56	; 0x38
20000810:	601a      	str	r2, [r3, #0]
			LED += 16;
20000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000814:	f103 0310 	add.w	r3, r3, #16
20000818:	62bb      	str	r3, [r7, #40]	; 0x28
2000081a:	e003      	b.n	20000824 <main+0x2cc>
		} else {
			*freqAddr = 0; // Set back to 0 when done or not shooting
2000081c:	68bb      	ldr	r3, [r7, #8]
2000081e:	f04f 0200 	mov.w	r2, #0
20000822:	601a      	str	r2, [r3, #0]
		}

		int8_t right_y = master_rx_buffer[3];	// down = -1, center = 1, up = 0
20000824:	f641 1348 	movw	r3, #6472	; 0x1948
20000828:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000082c:	78db      	ldrb	r3, [r3, #3]
2000082e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		int8_t left_y = master_rx_buffer[5];
20000832:	f641 1348 	movw	r3, #6472	; 0x1948
20000836:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000083a:	795b      	ldrb	r3, [r3, #5]
2000083c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(right_y || left_y) {}
20000840:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
20000844:	2b00      	cmp	r3, #0
	}
20000846:	e6ad      	b.n	200005a4 <main+0x4c>

20000848 <setupSPI>:

	return 0;
}

void setupSPI(void) {
20000848:	b580      	push	{r7, lr}
2000084a:	b084      	sub	sp, #16
2000084c:	af02      	add	r7, sp, #8
	//Initial short polling for refresh and initiation
	master_tx_buffer[0] = 0x80;
2000084e:	f641 1354 	movw	r3, #6484	; 0x1954
20000852:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000856:	f06f 027f 	mvn.w	r2, #127	; 0x7f
2000085a:	701a      	strb	r2, [r3, #0]
	master_tx_buffer[1] = 0x42;
2000085c:	f641 1354 	movw	r3, #6484	; 0x1954
20000860:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000864:	f04f 0242 	mov.w	r2, #66	; 0x42
20000868:	705a      	strb	r2, [r3, #1]
	master_tx_buffer[2] = 0x00;
2000086a:	f641 1354 	movw	r3, #6484	; 0x1954
2000086e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000872:	f04f 0200 	mov.w	r2, #0
20000876:	709a      	strb	r2, [r3, #2]
	master_tx_buffer[3] = 0xFF;
20000878:	f641 1354 	movw	r3, #6484	; 0x1954
2000087c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000880:	f04f 32ff 	mov.w	r2, #4294967295
20000884:	70da      	strb	r2, [r3, #3]
	master_tx_buffer[4] = 0xFF;
20000886:	f641 1354 	movw	r3, #6484	; 0x1954
2000088a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000088e:	f04f 32ff 	mov.w	r2, #4294967295
20000892:	711a      	strb	r2, [r3, #4]

	MSS_SPI_init(&g_mss_spi1);
20000894:	f641 1060 	movw	r0, #6496	; 0x1960
20000898:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000089c:	f000 f9a4 	bl	20000be8 <MSS_SPI_init>
	MSS_SPI_configure_master_mode
200008a0:	f04f 0308 	mov.w	r3, #8
200008a4:	9300      	str	r3, [sp, #0]
200008a6:	f641 1060 	movw	r0, #6496	; 0x1960
200008aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008ae:	f04f 0100 	mov.w	r1, #0
200008b2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
200008b6:	f04f 0307 	mov.w	r3, #7
200008ba:	f000 fadf 	bl	20000e7c <MSS_SPI_configure_master_mode>
		MSS_SPI_MODE3,
		MSS_SPI_PCLK_DIV_256,
		MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
	);

	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
200008be:	f641 1060 	movw	r0, #6496	; 0x1960
200008c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008c6:	f04f 0100 	mov.w	r1, #0
200008ca:	f000 fb67 	bl	20000f9c <MSS_SPI_set_slave_select>
	int i = 3;
200008ce:	f04f 0303 	mov.w	r3, #3
200008d2:	607b      	str	r3, [r7, #4]
	while(i) {
200008d4:	e016      	b.n	20000904 <setupSPI+0xbc>
		MSS_SPI_transfer_block
200008d6:	f04f 0305 	mov.w	r3, #5
200008da:	9300      	str	r3, [sp, #0]
200008dc:	f641 1060 	movw	r0, #6496	; 0x1960
200008e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008e4:	f641 1154 	movw	r1, #6484	; 0x1954
200008e8:	f2c2 0100 	movt	r1, #8192	; 0x2000
200008ec:	f04f 0205 	mov.w	r2, #5
200008f0:	f641 1348 	movw	r3, #6472	; 0x1948
200008f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008f8:	f000 fc1c 	bl	20001134 <MSS_SPI_transfer_block>
			&master_tx_buffer,
			5, 	//5 bytes of command
			&master_rx_buffer,
			5	//5 bytes of data
		);
		--i;
200008fc:	687b      	ldr	r3, [r7, #4]
200008fe:	f103 33ff 	add.w	r3, r3, #4294967295
20000902:	607b      	str	r3, [r7, #4]
		MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
	);

	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
	int i = 3;
	while(i) {
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	2b00      	cmp	r3, #0
20000908:	d1e5      	bne.n	200008d6 <setupSPI+0x8e>
			&master_rx_buffer,
			5	//5 bytes of data
		);
		--i;
	}
	MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
2000090a:	f641 1060 	movw	r0, #6496	; 0x1960
2000090e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000912:	f04f 0100 	mov.w	r1, #0
20000916:	f000 fbc5 	bl	200010a4 <MSS_SPI_clear_slave_select>


	//Enter Config Mode
	master_tx_buffer[0] = 0x80;
2000091a:	f641 1354 	movw	r3, #6484	; 0x1954
2000091e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000922:	f06f 027f 	mvn.w	r2, #127	; 0x7f
20000926:	701a      	strb	r2, [r3, #0]
	master_tx_buffer[1] = 0xc2;
20000928:	f641 1354 	movw	r3, #6484	; 0x1954
2000092c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000930:	f06f 023d 	mvn.w	r2, #61	; 0x3d
20000934:	705a      	strb	r2, [r3, #1]
	master_tx_buffer[2] = 0x00;
20000936:	f641 1354 	movw	r3, #6484	; 0x1954
2000093a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000093e:	f04f 0200 	mov.w	r2, #0
20000942:	709a      	strb	r2, [r3, #2]
	master_tx_buffer[3] = 0x80;
20000944:	f641 1354 	movw	r3, #6484	; 0x1954
20000948:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000094c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
20000950:	70da      	strb	r2, [r3, #3]
	master_tx_buffer[4] = 0x00;
20000952:	f641 1354 	movw	r3, #6484	; 0x1954
20000956:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000095a:	f04f 0200 	mov.w	r2, #0
2000095e:	711a      	strb	r2, [r3, #4]
	
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000960:	f641 1060 	movw	r0, #6496	; 0x1960
20000964:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000968:	f04f 0100 	mov.w	r1, #0
2000096c:	f000 fb16 	bl	20000f9c <MSS_SPI_set_slave_select>
	MSS_SPI_transfer_block
20000970:	f04f 0305 	mov.w	r3, #5
20000974:	9300      	str	r3, [sp, #0]
20000976:	f641 1060 	movw	r0, #6496	; 0x1960
2000097a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000097e:	f641 1154 	movw	r1, #6484	; 0x1954
20000982:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000986:	f04f 0205 	mov.w	r2, #5
2000098a:	f641 1348 	movw	r3, #6472	; 0x1948
2000098e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000992:	f000 fbcf 	bl	20001134 <MSS_SPI_transfer_block>
		&master_tx_buffer,
		5, 	//5 bytes of command
		&master_rx_buffer,
		5	//5 bytes of data
	);
	MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000996:	f641 1060 	movw	r0, #6496	; 0x1960
2000099a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000099e:	f04f 0100 	mov.w	r1, #0
200009a2:	f000 fb7f 	bl	200010a4 <MSS_SPI_clear_slave_select>

	//Select Mode: Digital or Analog
	master_tx_buffer[0] = 0x80;
200009a6:	f641 1354 	movw	r3, #6484	; 0x1954
200009aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009ae:	f06f 027f 	mvn.w	r2, #127	; 0x7f
200009b2:	701a      	strb	r2, [r3, #0]
	master_tx_buffer[1] = 0x22;
200009b4:	f641 1354 	movw	r3, #6484	; 0x1954
200009b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009bc:	f04f 0222 	mov.w	r2, #34	; 0x22
200009c0:	705a      	strb	r2, [r3, #1]
	master_tx_buffer[2] = 0x00;
200009c2:	f641 1354 	movw	r3, #6484	; 0x1954
200009c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009ca:	f04f 0200 	mov.w	r2, #0
200009ce:	709a      	strb	r2, [r3, #2]
	master_tx_buffer[3] = 0x80; //0x01 = analog, 0x00 = digital
200009d0:	f641 1354 	movw	r3, #6484	; 0x1954
200009d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009d8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
200009dc:	70da      	strb	r2, [r3, #3]
	master_tx_buffer[4] = 0xc0; //0x03 = lock mode
200009de:	f641 1354 	movw	r3, #6484	; 0x1954
200009e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009e6:	f06f 023f 	mvn.w	r2, #63	; 0x3f
200009ea:	711a      	strb	r2, [r3, #4]
	master_tx_buffer[5] = 0x00;
200009ec:	f641 1354 	movw	r3, #6484	; 0x1954
200009f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009f4:	f04f 0200 	mov.w	r2, #0
200009f8:	715a      	strb	r2, [r3, #5]
	master_tx_buffer[6] = 0x00;
200009fa:	f641 1354 	movw	r3, #6484	; 0x1954
200009fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a02:	f04f 0200 	mov.w	r2, #0
20000a06:	719a      	strb	r2, [r3, #6]
	master_tx_buffer[7] = 0x00;
20000a08:	f641 1354 	movw	r3, #6484	; 0x1954
20000a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a10:	f04f 0200 	mov.w	r2, #0
20000a14:	71da      	strb	r2, [r3, #7]
	master_tx_buffer[8] = 0x00;
20000a16:	f641 1354 	movw	r3, #6484	; 0x1954
20000a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a1e:	f04f 0200 	mov.w	r2, #0
20000a22:	721a      	strb	r2, [r3, #8]

	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000a24:	f641 1060 	movw	r0, #6496	; 0x1960
20000a28:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a2c:	f04f 0100 	mov.w	r1, #0
20000a30:	f000 fab4 	bl	20000f9c <MSS_SPI_set_slave_select>
	MSS_SPI_transfer_block
20000a34:	f04f 0309 	mov.w	r3, #9
20000a38:	9300      	str	r3, [sp, #0]
20000a3a:	f641 1060 	movw	r0, #6496	; 0x1960
20000a3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a42:	f641 1154 	movw	r1, #6484	; 0x1954
20000a46:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000a4a:	f04f 0209 	mov.w	r2, #9
20000a4e:	f641 1348 	movw	r3, #6472	; 0x1948
20000a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a56:	f000 fb6d 	bl	20001134 <MSS_SPI_transfer_block>
		&master_tx_buffer,
		9,	//9 bytes of command
		&master_rx_buffer,
		9 	//9 bytes of data
	);
	MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000a5a:	f641 1060 	movw	r0, #6496	; 0x1960
20000a5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a62:	f04f 0100 	mov.w	r1, #0
20000a66:	f000 fb1d 	bl	200010a4 <MSS_SPI_clear_slave_select>

	//Exit Config
	master_tx_buffer[0] = 0x80;
20000a6a:	f641 1354 	movw	r3, #6484	; 0x1954
20000a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a72:	f06f 027f 	mvn.w	r2, #127	; 0x7f
20000a76:	701a      	strb	r2, [r3, #0]
	master_tx_buffer[1] = 0xc2;
20000a78:	f641 1354 	movw	r3, #6484	; 0x1954
20000a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a80:	f06f 023d 	mvn.w	r2, #61	; 0x3d
20000a84:	705a      	strb	r2, [r3, #1]
	master_tx_buffer[2] = 0x00;
20000a86:	f641 1354 	movw	r3, #6484	; 0x1954
20000a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a8e:	f04f 0200 	mov.w	r2, #0
20000a92:	709a      	strb	r2, [r3, #2]
	master_tx_buffer[3] = 0x00;
20000a94:	f641 1354 	movw	r3, #6484	; 0x1954
20000a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a9c:	f04f 0200 	mov.w	r2, #0
20000aa0:	70da      	strb	r2, [r3, #3]
	master_tx_buffer[4] = 0x5A;
20000aa2:	f641 1354 	movw	r3, #6484	; 0x1954
20000aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000aaa:	f04f 025a 	mov.w	r2, #90	; 0x5a
20000aae:	711a      	strb	r2, [r3, #4]
	master_tx_buffer[5] = 0x5A;
20000ab0:	f641 1354 	movw	r3, #6484	; 0x1954
20000ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ab8:	f04f 025a 	mov.w	r2, #90	; 0x5a
20000abc:	715a      	strb	r2, [r3, #5]
	master_tx_buffer[6] = 0x5A;
20000abe:	f641 1354 	movw	r3, #6484	; 0x1954
20000ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ac6:	f04f 025a 	mov.w	r2, #90	; 0x5a
20000aca:	719a      	strb	r2, [r3, #6]
	master_tx_buffer[7] = 0x5A;
20000acc:	f641 1354 	movw	r3, #6484	; 0x1954
20000ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ad4:	f04f 025a 	mov.w	r2, #90	; 0x5a
20000ad8:	71da      	strb	r2, [r3, #7]
	master_tx_buffer[8] = 0x5A;
20000ada:	f641 1354 	movw	r3, #6484	; 0x1954
20000ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ae2:	f04f 025a 	mov.w	r2, #90	; 0x5a
20000ae6:	721a      	strb	r2, [r3, #8]

	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000ae8:	f641 1060 	movw	r0, #6496	; 0x1960
20000aec:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000af0:	f04f 0100 	mov.w	r1, #0
20000af4:	f000 fa52 	bl	20000f9c <MSS_SPI_set_slave_select>
	MSS_SPI_transfer_block
20000af8:	f04f 0309 	mov.w	r3, #9
20000afc:	9300      	str	r3, [sp, #0]
20000afe:	f641 1060 	movw	r0, #6496	; 0x1960
20000b02:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b06:	f641 1154 	movw	r1, #6484	; 0x1954
20000b0a:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000b0e:	f04f 0209 	mov.w	r2, #9
20000b12:	f641 1348 	movw	r3, #6472	; 0x1948
20000b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b1a:	f000 fb0b 	bl	20001134 <MSS_SPI_transfer_block>
		&master_tx_buffer,
		9, 	//9 bytes of command
		&master_rx_buffer,
		9 	//9 bytes of data
	);
	MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000b1e:	f641 1060 	movw	r0, #6496	; 0x1960
20000b22:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b26:	f04f 0100 	mov.w	r1, #0
20000b2a:	f000 fabb 	bl	200010a4 <MSS_SPI_clear_slave_select>

}
20000b2e:	f107 0708 	add.w	r7, r7, #8
20000b32:	46bd      	mov	sp, r7
20000b34:	bd80      	pop	{r7, pc}
20000b36:	bf00      	nop

20000b38 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000b38:	b480      	push	{r7}
20000b3a:	b083      	sub	sp, #12
20000b3c:	af00      	add	r7, sp, #0
20000b3e:	4603      	mov	r3, r0
20000b40:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000b42:	f24e 1300 	movw	r3, #57600	; 0xe100
20000b46:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000b4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000b4e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000b52:	88f9      	ldrh	r1, [r7, #6]
20000b54:	f001 011f 	and.w	r1, r1, #31
20000b58:	f04f 0001 	mov.w	r0, #1
20000b5c:	fa00 f101 	lsl.w	r1, r0, r1
20000b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000b64:	f107 070c 	add.w	r7, r7, #12
20000b68:	46bd      	mov	sp, r7
20000b6a:	bc80      	pop	{r7}
20000b6c:	4770      	bx	lr
20000b6e:	bf00      	nop

20000b70 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000b70:	b480      	push	{r7}
20000b72:	b083      	sub	sp, #12
20000b74:	af00      	add	r7, sp, #0
20000b76:	4603      	mov	r3, r0
20000b78:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000b7a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000b7e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000b82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000b86:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000b8a:	88f9      	ldrh	r1, [r7, #6]
20000b8c:	f001 011f 	and.w	r1, r1, #31
20000b90:	f04f 0001 	mov.w	r0, #1
20000b94:	fa00 f101 	lsl.w	r1, r0, r1
20000b98:	f102 0220 	add.w	r2, r2, #32
20000b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000ba0:	f107 070c 	add.w	r7, r7, #12
20000ba4:	46bd      	mov	sp, r7
20000ba6:	bc80      	pop	{r7}
20000ba8:	4770      	bx	lr
20000baa:	bf00      	nop

20000bac <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000bac:	b480      	push	{r7}
20000bae:	b083      	sub	sp, #12
20000bb0:	af00      	add	r7, sp, #0
20000bb2:	4603      	mov	r3, r0
20000bb4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000bb6:	f24e 1300 	movw	r3, #57600	; 0xe100
20000bba:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000bbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000bc2:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000bc6:	88f9      	ldrh	r1, [r7, #6]
20000bc8:	f001 011f 	and.w	r1, r1, #31
20000bcc:	f04f 0001 	mov.w	r0, #1
20000bd0:	fa00 f101 	lsl.w	r1, r0, r1
20000bd4:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000bdc:	f107 070c 	add.w	r7, r7, #12
20000be0:	46bd      	mov	sp, r7
20000be2:	bc80      	pop	{r7}
20000be4:	4770      	bx	lr
20000be6:	bf00      	nop

20000be8 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
20000be8:	b580      	push	{r7, lr}
20000bea:	b084      	sub	sp, #16
20000bec:	af00      	add	r7, sp, #0
20000bee:	6078      	str	r0, [r7, #4]
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000bf0:	687a      	ldr	r2, [r7, #4]
20000bf2:	f641 13e4 	movw	r3, #6628	; 0x19e4
20000bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bfa:	429a      	cmp	r2, r3
20000bfc:	d007      	beq.n	20000c0e <MSS_SPI_init+0x26>
20000bfe:	687a      	ldr	r2, [r7, #4]
20000c00:	f641 1360 	movw	r3, #6496	; 0x1960
20000c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c08:	429a      	cmp	r2, r3
20000c0a:	d000      	beq.n	20000c0e <MSS_SPI_init+0x26>
20000c0c:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000c0e:	687b      	ldr	r3, [r7, #4]
20000c10:	889b      	ldrh	r3, [r3, #4]
20000c12:	b21b      	sxth	r3, r3
20000c14:	4618      	mov	r0, r3
20000c16:	f7ff ffab 	bl	20000b70 <NVIC_DisableIRQ>

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
20000c1a:	6878      	ldr	r0, [r7, #4]
20000c1c:	f04f 0100 	mov.w	r1, #0
20000c20:	f04f 0284 	mov.w	r2, #132	; 0x84
20000c24:	f000 fe12 	bl	2000184c <memset>
    
    this_spi->cmd_done = 1u;
20000c28:	687b      	ldr	r3, [r7, #4]
20000c2a:	f04f 0201 	mov.w	r2, #1
20000c2e:	625a      	str	r2, [r3, #36]	; 0x24

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20000c30:	f04f 0300 	mov.w	r3, #0
20000c34:	81fb      	strh	r3, [r7, #14]
20000c36:	e00d      	b.n	20000c54 <MSS_SPI_init+0x6c>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
20000c38:	89fb      	ldrh	r3, [r7, #14]
20000c3a:	687a      	ldr	r2, [r7, #4]
20000c3c:	f103 0306 	add.w	r3, r3, #6
20000c40:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000c44:	4413      	add	r3, r2
20000c46:	f04f 32ff 	mov.w	r2, #4294967295
20000c4a:	605a      	str	r2, [r3, #4]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20000c4c:	89fb      	ldrh	r3, [r7, #14]
20000c4e:	f103 0301 	add.w	r3, r3, #1
20000c52:	81fb      	strh	r3, [r7, #14]
20000c54:	89fb      	ldrh	r3, [r7, #14]
20000c56:	2b07      	cmp	r3, #7
20000c58:	d9ee      	bls.n	20000c38 <MSS_SPI_init+0x50>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
20000c5a:	687a      	ldr	r2, [r7, #4]
20000c5c:	f641 13e4 	movw	r3, #6628	; 0x19e4
20000c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c64:	429a      	cmp	r2, r3
20000c66:	d126      	bne.n	20000cb6 <MSS_SPI_init+0xce>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20000c68:	687a      	ldr	r2, [r7, #4]
20000c6a:	f241 0300 	movw	r3, #4096	; 0x1000
20000c6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000c72:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20000c74:	687b      	ldr	r3, [r7, #4]
20000c76:	f04f 020c 	mov.w	r2, #12
20000c7a:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20000c7c:	f242 0300 	movw	r3, #8192	; 0x2000
20000c80:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000c84:	f242 0200 	movw	r2, #8192	; 0x2000
20000c88:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20000c92:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20000c94:	f04f 000c 	mov.w	r0, #12
20000c98:	f7ff ff88 	bl	20000bac <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000c9c:	f242 0300 	movw	r3, #8192	; 0x2000
20000ca0:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000ca4:	f242 0200 	movw	r2, #8192	; 0x2000
20000ca8:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000cae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20000cb2:	631a      	str	r2, [r3, #48]	; 0x30
20000cb4:	e025      	b.n	20000d02 <MSS_SPI_init+0x11a>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000cb6:	687a      	ldr	r2, [r7, #4]
20000cb8:	f241 0300 	movw	r3, #4096	; 0x1000
20000cbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000cc0:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20000cc2:	687b      	ldr	r3, [r7, #4]
20000cc4:	f04f 020d 	mov.w	r2, #13
20000cc8:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20000cca:	f242 0300 	movw	r3, #8192	; 0x2000
20000cce:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000cd2:	f242 0200 	movw	r2, #8192	; 0x2000
20000cd6:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000cda:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20000ce0:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20000ce2:	f04f 000d 	mov.w	r0, #13
20000ce6:	f7ff ff61 	bl	20000bac <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20000cea:	f242 0300 	movw	r3, #8192	; 0x2000
20000cee:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000cf2:	f242 0200 	movw	r2, #8192	; 0x2000
20000cf6:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000cfa:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20000d00:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000d02:	687b      	ldr	r3, [r7, #4]
20000d04:	681b      	ldr	r3, [r3, #0]
20000d06:	687a      	ldr	r2, [r7, #4]
20000d08:	6812      	ldr	r2, [r2, #0]
20000d0a:	6812      	ldr	r2, [r2, #0]
20000d0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000d10:	601a      	str	r2, [r3, #0]
}
20000d12:	f107 0710 	add.w	r7, r7, #16
20000d16:	46bd      	mov	sp, r7
20000d18:	bd80      	pop	{r7, pc}
20000d1a:	bf00      	nop

20000d1c <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20000d1c:	b580      	push	{r7, lr}
20000d1e:	b08a      	sub	sp, #40	; 0x28
20000d20:	af00      	add	r7, sp, #0
20000d22:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
20000d24:	687b      	ldr	r3, [r7, #4]
20000d26:	681b      	ldr	r3, [r3, #0]
20000d28:	681b      	ldr	r3, [r3, #0]
20000d2a:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	681b      	ldr	r3, [r3, #0]
20000d30:	699b      	ldr	r3, [r3, #24]
20000d32:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	681b      	ldr	r3, [r3, #0]
20000d38:	685b      	ldr	r3, [r3, #4]
20000d3a:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
20000d3c:	687b      	ldr	r3, [r7, #4]
20000d3e:	681b      	ldr	r3, [r3, #0]
20000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000d42:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
20000d44:	687b      	ldr	r3, [r7, #4]
20000d46:	681b      	ldr	r3, [r3, #0]
20000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000d4a:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
20000d4c:	687b      	ldr	r3, [r7, #4]
20000d4e:	681b      	ldr	r3, [r3, #0]
20000d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20000d52:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
20000d54:	687b      	ldr	r3, [r7, #4]
20000d56:	681b      	ldr	r3, [r3, #0]
20000d58:	69db      	ldr	r3, [r3, #28]
20000d5a:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20000d5c:	687a      	ldr	r2, [r7, #4]
20000d5e:	f641 13e4 	movw	r3, #6628	; 0x19e4
20000d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d66:	429a      	cmp	r2, r3
20000d68:	d12e      	bne.n	20000dc8 <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20000d6a:	687a      	ldr	r2, [r7, #4]
20000d6c:	f241 0300 	movw	r3, #4096	; 0x1000
20000d70:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000d74:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20000d76:	687b      	ldr	r3, [r7, #4]
20000d78:	f04f 020c 	mov.w	r2, #12
20000d7c:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20000d7e:	f242 0300 	movw	r3, #8192	; 0x2000
20000d82:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000d86:	f242 0200 	movw	r2, #8192	; 0x2000
20000d8a:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000d8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20000d94:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20000d96:	f04f 000c 	mov.w	r0, #12
20000d9a:	f7ff ff07 	bl	20000bac <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000d9e:	f242 0300 	movw	r3, #8192	; 0x2000
20000da2:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000da6:	f242 0200 	movw	r2, #8192	; 0x2000
20000daa:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000db0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20000db4:	631a      	str	r2, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000db6:	687b      	ldr	r3, [r7, #4]
20000db8:	681b      	ldr	r3, [r3, #0]
20000dba:	687a      	ldr	r2, [r7, #4]
20000dbc:	6812      	ldr	r2, [r2, #0]
20000dbe:	6812      	ldr	r2, [r2, #0]
20000dc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000dc4:	601a      	str	r2, [r3, #0]
20000dc6:	e02d      	b.n	20000e24 <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000dc8:	687a      	ldr	r2, [r7, #4]
20000dca:	f241 0300 	movw	r3, #4096	; 0x1000
20000dce:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000dd2:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20000dd4:	687b      	ldr	r3, [r7, #4]
20000dd6:	f04f 020d 	mov.w	r2, #13
20000dda:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20000ddc:	f242 0300 	movw	r3, #8192	; 0x2000
20000de0:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000de4:	f242 0200 	movw	r2, #8192	; 0x2000
20000de8:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000dec:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20000df2:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20000df4:	f04f 000d 	mov.w	r0, #13
20000df8:	f7ff fed8 	bl	20000bac <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20000dfc:	f242 0300 	movw	r3, #8192	; 0x2000
20000e00:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000e04:	f242 0200 	movw	r2, #8192	; 0x2000
20000e08:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000e0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20000e12:	631a      	str	r2, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000e14:	687b      	ldr	r3, [r7, #4]
20000e16:	681b      	ldr	r3, [r3, #0]
20000e18:	687a      	ldr	r2, [r7, #4]
20000e1a:	6812      	ldr	r2, [r2, #0]
20000e1c:	6812      	ldr	r2, [r2, #0]
20000e1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000e22:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
20000e24:	68fb      	ldr	r3, [r7, #12]
20000e26:	f023 0301 	bic.w	r3, r3, #1
20000e2a:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
20000e2c:	687b      	ldr	r3, [r7, #4]
20000e2e:	681b      	ldr	r3, [r3, #0]
20000e30:	68fa      	ldr	r2, [r7, #12]
20000e32:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
20000e34:	687b      	ldr	r3, [r7, #4]
20000e36:	681b      	ldr	r3, [r3, #0]
20000e38:	693a      	ldr	r2, [r7, #16]
20000e3a:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20000e3c:	687b      	ldr	r3, [r7, #4]
20000e3e:	681b      	ldr	r3, [r3, #0]
20000e40:	697a      	ldr	r2, [r7, #20]
20000e42:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000e44:	687b      	ldr	r3, [r7, #4]
20000e46:	681b      	ldr	r3, [r3, #0]
20000e48:	687a      	ldr	r2, [r7, #4]
20000e4a:	6812      	ldr	r2, [r2, #0]
20000e4c:	6812      	ldr	r2, [r2, #0]
20000e4e:	f042 0201 	orr.w	r2, r2, #1
20000e52:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20000e54:	687b      	ldr	r3, [r7, #4]
20000e56:	681b      	ldr	r3, [r3, #0]
20000e58:	69ba      	ldr	r2, [r7, #24]
20000e5a:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20000e5c:	687b      	ldr	r3, [r7, #4]
20000e5e:	681b      	ldr	r3, [r3, #0]
20000e60:	69fa      	ldr	r2, [r7, #28]
20000e62:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20000e64:	687b      	ldr	r3, [r7, #4]
20000e66:	681b      	ldr	r3, [r3, #0]
20000e68:	6a3a      	ldr	r2, [r7, #32]
20000e6a:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20000e6c:	687b      	ldr	r3, [r7, #4]
20000e6e:	681b      	ldr	r3, [r3, #0]
20000e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000e72:	61da      	str	r2, [r3, #28]
}
20000e74:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000e78:	46bd      	mov	sp, r7
20000e7a:	bd80      	pop	{r7, pc}

20000e7c <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20000e7c:	b580      	push	{r7, lr}
20000e7e:	b084      	sub	sp, #16
20000e80:	af00      	add	r7, sp, #0
20000e82:	60f8      	str	r0, [r7, #12]
20000e84:	607a      	str	r2, [r7, #4]
20000e86:	460a      	mov	r2, r1
20000e88:	72fa      	strb	r2, [r7, #11]
20000e8a:	70fb      	strb	r3, [r7, #3]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000e8c:	68fa      	ldr	r2, [r7, #12]
20000e8e:	f641 13e4 	movw	r3, #6628	; 0x19e4
20000e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e96:	429a      	cmp	r2, r3
20000e98:	d007      	beq.n	20000eaa <MSS_SPI_configure_master_mode+0x2e>
20000e9a:	68fa      	ldr	r2, [r7, #12]
20000e9c:	f641 1360 	movw	r3, #6496	; 0x1960
20000ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ea4:	429a      	cmp	r2, r3
20000ea6:	d000      	beq.n	20000eaa <MSS_SPI_configure_master_mode+0x2e>
20000ea8:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20000eaa:	7afb      	ldrb	r3, [r7, #11]
20000eac:	2b07      	cmp	r3, #7
20000eae:	d900      	bls.n	20000eb2 <MSS_SPI_configure_master_mode+0x36>
20000eb0:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20000eb2:	7e3b      	ldrb	r3, [r7, #24]
20000eb4:	2b20      	cmp	r3, #32
20000eb6:	d900      	bls.n	20000eba <MSS_SPI_configure_master_mode+0x3e>
20000eb8:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000eba:	68fb      	ldr	r3, [r7, #12]
20000ebc:	889b      	ldrh	r3, [r3, #4]
20000ebe:	b21b      	sxth	r3, r3
20000ec0:	4618      	mov	r0, r3
20000ec2:	f7ff fe55 	bl	20000b70 <NVIC_DisableIRQ>

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
20000ec6:	68fb      	ldr	r3, [r7, #12]
20000ec8:	f04f 0200 	mov.w	r2, #0
20000ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20000ed0:	68fb      	ldr	r3, [r7, #12]
20000ed2:	681b      	ldr	r3, [r3, #0]
20000ed4:	68fa      	ldr	r2, [r7, #12]
20000ed6:	6812      	ldr	r2, [r2, #0]
20000ed8:	6812      	ldr	r2, [r2, #0]
20000eda:	f022 0201 	bic.w	r2, r2, #1
20000ede:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
20000ee0:	68fb      	ldr	r3, [r7, #12]
20000ee2:	681b      	ldr	r3, [r3, #0]
20000ee4:	68fa      	ldr	r2, [r7, #12]
20000ee6:	6812      	ldr	r2, [r2, #0]
20000ee8:	6812      	ldr	r2, [r2, #0]
20000eea:	f042 0202 	orr.w	r2, r2, #2
20000eee:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000ef0:	68fb      	ldr	r3, [r7, #12]
20000ef2:	681b      	ldr	r3, [r3, #0]
20000ef4:	68fa      	ldr	r2, [r7, #12]
20000ef6:	6812      	ldr	r2, [r2, #0]
20000ef8:	6812      	ldr	r2, [r2, #0]
20000efa:	f042 0201 	orr.w	r2, r2, #1
20000efe:	601a      	str	r2, [r3, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
20000f00:	7afb      	ldrb	r3, [r7, #11]
20000f02:	2b07      	cmp	r3, #7
20000f04:	d83f      	bhi.n	20000f86 <MSS_SPI_configure_master_mode+0x10a>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20000f06:	687b      	ldr	r3, [r7, #4]
20000f08:	2b00      	cmp	r3, #0
20000f0a:	d00b      	beq.n	20000f24 <MSS_SPI_configure_master_mode+0xa8>
20000f0c:	687b      	ldr	r3, [r7, #4]
20000f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20000f12:	d007      	beq.n	20000f24 <MSS_SPI_configure_master_mode+0xa8>
20000f14:	687b      	ldr	r3, [r7, #4]
20000f16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20000f1a:	d003      	beq.n	20000f24 <MSS_SPI_configure_master_mode+0xa8>
20000f1c:	687b      	ldr	r3, [r7, #4]
20000f1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
20000f22:	d10f      	bne.n	20000f44 <MSS_SPI_configure_master_mode+0xc8>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20000f24:	7afa      	ldrb	r2, [r7, #11]
20000f26:	6879      	ldr	r1, [r7, #4]
20000f28:	f240 1302 	movw	r3, #258	; 0x102
20000f2c:	f2c2 4300 	movt	r3, #9216	; 0x2400
20000f30:	ea41 0303 	orr.w	r3, r1, r3
20000f34:	68f9      	ldr	r1, [r7, #12]
20000f36:	f102 0206 	add.w	r2, r2, #6
20000f3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000f3e:	440a      	add	r2, r1
20000f40:	6053      	str	r3, [r2, #4]
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20000f42:	e00e      	b.n	20000f62 <MSS_SPI_configure_master_mode+0xe6>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
20000f44:	7afa      	ldrb	r2, [r7, #11]
20000f46:	6879      	ldr	r1, [r7, #4]
20000f48:	f240 1302 	movw	r3, #258	; 0x102
20000f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f50:	ea41 0303 	orr.w	r3, r1, r3
20000f54:	68f9      	ldr	r1, [r7, #12]
20000f56:	f102 0206 	add.w	r2, r2, #6
20000f5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000f5e:	440a      	add	r2, r1
20000f60:	6053      	str	r3, [r2, #4]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20000f62:	7afb      	ldrb	r3, [r7, #11]
20000f64:	68fa      	ldr	r2, [r7, #12]
20000f66:	f103 0306 	add.w	r3, r3, #6
20000f6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000f6e:	4413      	add	r3, r2
20000f70:	7e3a      	ldrb	r2, [r7, #24]
20000f72:	721a      	strb	r2, [r3, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20000f74:	7afb      	ldrb	r3, [r7, #11]
20000f76:	68fa      	ldr	r2, [r7, #12]
20000f78:	f103 0306 	add.w	r3, r3, #6
20000f7c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000f80:	4413      	add	r3, r2
20000f82:	78fa      	ldrb	r2, [r7, #3]
20000f84:	725a      	strb	r2, [r3, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20000f86:	68fb      	ldr	r3, [r7, #12]
20000f88:	889b      	ldrh	r3, [r3, #4]
20000f8a:	b21b      	sxth	r3, r3
20000f8c:	4618      	mov	r0, r3
20000f8e:	f7ff fdd3 	bl	20000b38 <NVIC_EnableIRQ>
}
20000f92:	f107 0710 	add.w	r7, r7, #16
20000f96:	46bd      	mov	sp, r7
20000f98:	bd80      	pop	{r7, pc}
20000f9a:	bf00      	nop

20000f9c <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20000f9c:	b580      	push	{r7, lr}
20000f9e:	b084      	sub	sp, #16
20000fa0:	af00      	add	r7, sp, #0
20000fa2:	6078      	str	r0, [r7, #4]
20000fa4:	460b      	mov	r3, r1
20000fa6:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000fa8:	687a      	ldr	r2, [r7, #4]
20000faa:	f641 13e4 	movw	r3, #6628	; 0x19e4
20000fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fb2:	429a      	cmp	r2, r3
20000fb4:	d007      	beq.n	20000fc6 <MSS_SPI_set_slave_select+0x2a>
20000fb6:	687a      	ldr	r2, [r7, #4]
20000fb8:	f641 1360 	movw	r3, #6496	; 0x1960
20000fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fc0:	429a      	cmp	r2, r3
20000fc2:	d000      	beq.n	20000fc6 <MSS_SPI_set_slave_select+0x2a>
20000fc4:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20000fc6:	687b      	ldr	r3, [r7, #4]
20000fc8:	681b      	ldr	r3, [r3, #0]
20000fca:	681b      	ldr	r3, [r3, #0]
20000fcc:	f003 0302 	and.w	r3, r3, #2
20000fd0:	2b00      	cmp	r3, #0
20000fd2:	d100      	bne.n	20000fd6 <MSS_SPI_set_slave_select+0x3a>
20000fd4:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
20000fd6:	78fb      	ldrb	r3, [r7, #3]
20000fd8:	687a      	ldr	r2, [r7, #4]
20000fda:	f103 0306 	add.w	r3, r3, #6
20000fde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000fe2:	4413      	add	r3, r2
20000fe4:	685b      	ldr	r3, [r3, #4]
20000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
20000fea:	d100      	bne.n	20000fee <MSS_SPI_set_slave_select+0x52>
20000fec:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000fee:	687b      	ldr	r3, [r7, #4]
20000ff0:	889b      	ldrh	r3, [r3, #4]
20000ff2:	b21b      	sxth	r3, r3
20000ff4:	4618      	mov	r0, r3
20000ff6:	f7ff fdbb 	bl	20000b70 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20000ffa:	687b      	ldr	r3, [r7, #4]
20000ffc:	681b      	ldr	r3, [r3, #0]
20000ffe:	689b      	ldr	r3, [r3, #8]
20001000:	f003 0304 	and.w	r3, r3, #4
20001004:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
20001006:	68fb      	ldr	r3, [r7, #12]
20001008:	2b00      	cmp	r3, #0
2000100a:	d002      	beq.n	20001012 <MSS_SPI_set_slave_select+0x76>
    {
         recover_from_rx_overflow(this_spi);
2000100c:	6878      	ldr	r0, [r7, #4]
2000100e:	f7ff fe85 	bl	20000d1c <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20001012:	687b      	ldr	r3, [r7, #4]
20001014:	681b      	ldr	r3, [r3, #0]
20001016:	687a      	ldr	r2, [r7, #4]
20001018:	6812      	ldr	r2, [r2, #0]
2000101a:	6812      	ldr	r2, [r2, #0]
2000101c:	f022 0201 	bic.w	r2, r2, #1
20001020:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
20001022:	687b      	ldr	r3, [r7, #4]
20001024:	681a      	ldr	r2, [r3, #0]
20001026:	78fb      	ldrb	r3, [r7, #3]
20001028:	6879      	ldr	r1, [r7, #4]
2000102a:	f103 0306 	add.w	r3, r3, #6
2000102e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001032:	440b      	add	r3, r1
20001034:	685b      	ldr	r3, [r3, #4]
20001036:	6013      	str	r3, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
20001038:	687b      	ldr	r3, [r7, #4]
2000103a:	681a      	ldr	r2, [r3, #0]
2000103c:	78fb      	ldrb	r3, [r7, #3]
2000103e:	6879      	ldr	r1, [r7, #4]
20001040:	f103 0306 	add.w	r3, r3, #6
20001044:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001048:	440b      	add	r3, r1
2000104a:	7a5b      	ldrb	r3, [r3, #9]
2000104c:	6193      	str	r3, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
2000104e:	687b      	ldr	r3, [r7, #4]
20001050:	681a      	ldr	r2, [r3, #0]
20001052:	78fb      	ldrb	r3, [r7, #3]
20001054:	6879      	ldr	r1, [r7, #4]
20001056:	f103 0306 	add.w	r3, r3, #6
2000105a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000105e:	440b      	add	r3, r1
20001060:	7a1b      	ldrb	r3, [r3, #8]
20001062:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	681b      	ldr	r3, [r3, #0]
20001068:	687a      	ldr	r2, [r7, #4]
2000106a:	6812      	ldr	r2, [r2, #0]
2000106c:	6812      	ldr	r2, [r2, #0]
2000106e:	f042 0201 	orr.w	r2, r2, #1
20001072:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20001074:	687b      	ldr	r3, [r7, #4]
20001076:	681b      	ldr	r3, [r3, #0]
20001078:	687a      	ldr	r2, [r7, #4]
2000107a:	6812      	ldr	r2, [r2, #0]
2000107c:	69d1      	ldr	r1, [r2, #28]
2000107e:	78fa      	ldrb	r2, [r7, #3]
20001080:	f04f 0001 	mov.w	r0, #1
20001084:	fa00 f202 	lsl.w	r2, r0, r2
20001088:	ea41 0202 	orr.w	r2, r1, r2
2000108c:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000108e:	687b      	ldr	r3, [r7, #4]
20001090:	889b      	ldrh	r3, [r3, #4]
20001092:	b21b      	sxth	r3, r3
20001094:	4618      	mov	r0, r3
20001096:	f7ff fd4f 	bl	20000b38 <NVIC_EnableIRQ>
}
2000109a:	f107 0710 	add.w	r7, r7, #16
2000109e:	46bd      	mov	sp, r7
200010a0:	bd80      	pop	{r7, pc}
200010a2:	bf00      	nop

200010a4 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
200010a4:	b580      	push	{r7, lr}
200010a6:	b084      	sub	sp, #16
200010a8:	af00      	add	r7, sp, #0
200010aa:	6078      	str	r0, [r7, #4]
200010ac:	460b      	mov	r3, r1
200010ae:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200010b0:	687a      	ldr	r2, [r7, #4]
200010b2:	f641 13e4 	movw	r3, #6628	; 0x19e4
200010b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010ba:	429a      	cmp	r2, r3
200010bc:	d007      	beq.n	200010ce <MSS_SPI_clear_slave_select+0x2a>
200010be:	687a      	ldr	r2, [r7, #4]
200010c0:	f641 1360 	movw	r3, #6496	; 0x1960
200010c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010c8:	429a      	cmp	r2, r3
200010ca:	d000      	beq.n	200010ce <MSS_SPI_clear_slave_select+0x2a>
200010cc:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	681b      	ldr	r3, [r3, #0]
200010d2:	681b      	ldr	r3, [r3, #0]
200010d4:	f003 0302 	and.w	r3, r3, #2
200010d8:	2b00      	cmp	r3, #0
200010da:	d100      	bne.n	200010de <MSS_SPI_clear_slave_select+0x3a>
200010dc:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200010de:	687b      	ldr	r3, [r7, #4]
200010e0:	889b      	ldrh	r3, [r3, #4]
200010e2:	b21b      	sxth	r3, r3
200010e4:	4618      	mov	r0, r3
200010e6:	f7ff fd43 	bl	20000b70 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	681b      	ldr	r3, [r3, #0]
200010ee:	689b      	ldr	r3, [r3, #8]
200010f0:	f003 0304 	and.w	r3, r3, #4
200010f4:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
200010f6:	68fb      	ldr	r3, [r7, #12]
200010f8:	2b00      	cmp	r3, #0
200010fa:	d002      	beq.n	20001102 <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
200010fc:	6878      	ldr	r0, [r7, #4]
200010fe:	f7ff fe0d 	bl	20000d1c <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
20001102:	687b      	ldr	r3, [r7, #4]
20001104:	681b      	ldr	r3, [r3, #0]
20001106:	687a      	ldr	r2, [r7, #4]
20001108:	6812      	ldr	r2, [r2, #0]
2000110a:	69d1      	ldr	r1, [r2, #28]
2000110c:	78fa      	ldrb	r2, [r7, #3]
2000110e:	f04f 0001 	mov.w	r0, #1
20001112:	fa00 f202 	lsl.w	r2, r0, r2
20001116:	ea6f 0202 	mvn.w	r2, r2
2000111a:	ea01 0202 	and.w	r2, r1, r2
2000111e:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001120:	687b      	ldr	r3, [r7, #4]
20001122:	889b      	ldrh	r3, [r3, #4]
20001124:	b21b      	sxth	r3, r3
20001126:	4618      	mov	r0, r3
20001128:	f7ff fd06 	bl	20000b38 <NVIC_EnableIRQ>
}
2000112c:	f107 0710 	add.w	r7, r7, #16
20001130:	46bd      	mov	sp, r7
20001132:	bd80      	pop	{r7, pc}

20001134 <MSS_SPI_transfer_block>:
    const uint8_t * cmd_buffer,
    uint16_t cmd_byte_size,
    uint8_t * rd_buffer,
    uint16_t rd_byte_size
)
{
20001134:	b580      	push	{r7, lr}
20001136:	b08e      	sub	sp, #56	; 0x38
20001138:	af00      	add	r7, sp, #0
2000113a:	60f8      	str	r0, [r7, #12]
2000113c:	60b9      	str	r1, [r7, #8]
2000113e:	603b      	str	r3, [r7, #0]
20001140:	4613      	mov	r3, r2
20001142:	80fb      	strh	r3, [r7, #6]
    uint16_t transfer_idx = 0u;
20001144:	f04f 0300 	mov.w	r3, #0
20001148:	837b      	strh	r3, [r7, #26]
    uint16_t tx_idx;
    uint16_t rx_idx;
    uint32_t frame_count;
    volatile uint32_t rx_raw;
    uint16_t transit = 0u;
2000114a:	f04f 0300 	mov.w	r3, #0
2000114e:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t rx_overflow;
    uint32_t rx_fifo_empty;
    
    uint16_t transfer_size;     /* Total number of bytes transfered. */
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001150:	68fa      	ldr	r2, [r7, #12]
20001152:	f641 13e4 	movw	r3, #6628	; 0x19e4
20001156:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000115a:	429a      	cmp	r2, r3
2000115c:	d007      	beq.n	2000116e <MSS_SPI_transfer_block+0x3a>
2000115e:	68fa      	ldr	r2, [r7, #12]
20001160:	f641 1360 	movw	r3, #6496	; 0x1960
20001164:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001168:	429a      	cmp	r2, r3
2000116a:	d000      	beq.n	2000116e <MSS_SPI_transfer_block+0x3a>
2000116c:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
2000116e:	68fb      	ldr	r3, [r7, #12]
20001170:	681b      	ldr	r3, [r3, #0]
20001172:	681b      	ldr	r3, [r3, #0]
20001174:	f003 0302 	and.w	r3, r3, #2
20001178:	2b00      	cmp	r3, #0
2000117a:	d100      	bne.n	2000117e <MSS_SPI_transfer_block+0x4a>
2000117c:	be00      	bkpt	0x0000
    
    /* Compute number of bytes to transfer. */
    transfer_size = cmd_byte_size + rd_byte_size;
2000117e:	88fa      	ldrh	r2, [r7, #6]
20001180:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
20001184:	4413      	add	r3, r2
20001186:	86fb      	strh	r3, [r7, #54]	; 0x36
    
    /* Adjust to 1 byte transfer to cater for DMA transfers. */
    if(0u == transfer_size)
20001188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
2000118a:	2b00      	cmp	r3, #0
2000118c:	d103      	bne.n	20001196 <MSS_SPI_transfer_block+0x62>
    {
        frame_count = 1u;
2000118e:	f04f 0301 	mov.w	r3, #1
20001192:	623b      	str	r3, [r7, #32]
20001194:	e001      	b.n	2000119a <MSS_SPI_transfer_block+0x66>
    }
    else
    {
        frame_count = transfer_size;
20001196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
20001198:	623b      	str	r3, [r7, #32]
    }

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
2000119a:	68fb      	ldr	r3, [r7, #12]
2000119c:	681b      	ldr	r3, [r3, #0]
2000119e:	68fa      	ldr	r2, [r7, #12]
200011a0:	6812      	ldr	r2, [r2, #0]
200011a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200011a4:	f042 020c 	orr.w	r2, r2, #12
200011a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
200011aa:	68fb      	ldr	r3, [r7, #12]
200011ac:	681b      	ldr	r3, [r3, #0]
200011ae:	689b      	ldr	r3, [r3, #8]
200011b0:	f003 0304 	and.w	r3, r3, #4
200011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(rx_overflow)
200011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200011b8:	2b00      	cmp	r3, #0
200011ba:	d002      	beq.n	200011c2 <MSS_SPI_transfer_block+0x8e>
    {
         recover_from_rx_overflow(this_spi);
200011bc:	68f8      	ldr	r0, [r7, #12]
200011be:	f7ff fdad 	bl	20000d1c <recover_from_rx_overflow>
    }
    
    /* Set frame size to 8 bits and the frame count to the transfer size. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200011c2:	68fb      	ldr	r3, [r7, #12]
200011c4:	681b      	ldr	r3, [r3, #0]
200011c6:	68fa      	ldr	r2, [r7, #12]
200011c8:	6812      	ldr	r2, [r2, #0]
200011ca:	6812      	ldr	r2, [r2, #0]
200011cc:	f022 0201 	bic.w	r2, r2, #1
200011d0:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK) | ( (frame_count << TXRXDFCOUNT_SHIFT) & TXRXDFCOUNT_MASK);
200011d2:	68fb      	ldr	r3, [r7, #12]
200011d4:	6819      	ldr	r1, [r3, #0]
200011d6:	68fb      	ldr	r3, [r7, #12]
200011d8:	681b      	ldr	r3, [r3, #0]
200011da:	681b      	ldr	r3, [r3, #0]
200011dc:	f240 02ff 	movw	r2, #255	; 0xff
200011e0:	f6cf 7200 	movt	r2, #65280	; 0xff00
200011e4:	ea03 0202 	and.w	r2, r3, r2
200011e8:	6a3b      	ldr	r3, [r7, #32]
200011ea:	ea4f 2003 	mov.w	r0, r3, lsl #8
200011ee:	f64f 7300 	movw	r3, #65280	; 0xff00
200011f2:	f2c0 03ff 	movt	r3, #255	; 0xff
200011f6:	ea00 0303 	and.w	r3, r0, r3
200011fa:	ea42 0303 	orr.w	r3, r2, r3
200011fe:	600b      	str	r3, [r1, #0]
    this_spi->hw_reg->TXRXDF_SIZE = MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE;
20001200:	68fb      	ldr	r3, [r7, #12]
20001202:	681b      	ldr	r3, [r3, #0]
20001204:	f04f 0208 	mov.w	r2, #8
20001208:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
2000120a:	68fb      	ldr	r3, [r7, #12]
2000120c:	681b      	ldr	r3, [r3, #0]
2000120e:	68fa      	ldr	r2, [r7, #12]
20001210:	6812      	ldr	r2, [r2, #0]
20001212:	6812      	ldr	r2, [r2, #0]
20001214:	f042 0201 	orr.w	r2, r2, #1
20001218:	601a      	str	r2, [r3, #0]

    /* Flush the receive FIFO. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
2000121a:	68fb      	ldr	r3, [r7, #12]
2000121c:	681b      	ldr	r3, [r3, #0]
2000121e:	689b      	ldr	r3, [r3, #8]
20001220:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001224:	633b      	str	r3, [r7, #48]	; 0x30
    while(0u == rx_fifo_empty)
20001226:	e009      	b.n	2000123c <MSS_SPI_transfer_block+0x108>
    {
        rx_raw = this_spi->hw_reg->RX_DATA;
20001228:	68fb      	ldr	r3, [r7, #12]
2000122a:	681b      	ldr	r3, [r3, #0]
2000122c:	691b      	ldr	r3, [r3, #16]
2000122e:	617b      	str	r3, [r7, #20]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20001230:	68fb      	ldr	r3, [r7, #12]
20001232:	681b      	ldr	r3, [r3, #0]
20001234:	689b      	ldr	r3, [r3, #8]
20001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000123a:	633b      	str	r3, [r7, #48]	; 0x30
    this_spi->hw_reg->TXRXDF_SIZE = MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE;
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;

    /* Flush the receive FIFO. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
2000123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000123e:	2b00      	cmp	r3, #0
20001240:	d0f2      	beq.n	20001228 <MSS_SPI_transfer_block+0xf4>
    {
        rx_raw = this_spi->hw_reg->RX_DATA;
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    tx_idx = 0u;
20001242:	f04f 0300 	mov.w	r3, #0
20001246:	83bb      	strh	r3, [r7, #28]
    rx_idx = 0u;
20001248:	f04f 0300 	mov.w	r3, #0
2000124c:	83fb      	strh	r3, [r7, #30]
    if(tx_idx < cmd_byte_size)
2000124e:	8bba      	ldrh	r2, [r7, #28]
20001250:	88fb      	ldrh	r3, [r7, #6]
20001252:	429a      	cmp	r2, r3
20001254:	d20f      	bcs.n	20001276 <MSS_SPI_transfer_block+0x142>
    {
        this_spi->hw_reg->TX_DATA = cmd_buffer[tx_idx];
20001256:	68fb      	ldr	r3, [r7, #12]
20001258:	681b      	ldr	r3, [r3, #0]
2000125a:	8bb9      	ldrh	r1, [r7, #28]
2000125c:	68ba      	ldr	r2, [r7, #8]
2000125e:	440a      	add	r2, r1
20001260:	7812      	ldrb	r2, [r2, #0]
20001262:	615a      	str	r2, [r3, #20]
        ++tx_idx;
20001264:	8bbb      	ldrh	r3, [r7, #28]
20001266:	f103 0301 	add.w	r3, r3, #1
2000126a:	83bb      	strh	r3, [r7, #28]
        ++transit;
2000126c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
2000126e:	f103 0301 	add.w	r3, r3, #1
20001272:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
20001274:	e06a      	b.n	2000134c <MSS_SPI_transfer_block+0x218>
        ++tx_idx;
        ++transit;
    }
    else
    {
        if(tx_idx < transfer_size)
20001276:	8bba      	ldrh	r2, [r7, #28]
20001278:	8efb      	ldrh	r3, [r7, #54]	; 0x36
2000127a:	429a      	cmp	r2, r3
2000127c:	d266      	bcs.n	2000134c <MSS_SPI_transfer_block+0x218>
        {
            this_spi->hw_reg->TX_DATA = 0x00u;
2000127e:	68fb      	ldr	r3, [r7, #12]
20001280:	681b      	ldr	r3, [r3, #0]
20001282:	f04f 0200 	mov.w	r2, #0
20001286:	615a      	str	r2, [r3, #20]
            ++tx_idx;
20001288:	8bbb      	ldrh	r3, [r7, #28]
2000128a:	f103 0301 	add.w	r3, r3, #1
2000128e:	83bb      	strh	r3, [r7, #28]
            ++transit;
20001290:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
20001292:	f103 0301 	add.w	r3, r3, #1
20001296:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
20001298:	e058      	b.n	2000134c <MSS_SPI_transfer_block+0x218>
    {
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
2000129a:	68fb      	ldr	r3, [r7, #12]
2000129c:	681b      	ldr	r3, [r3, #0]
2000129e:	689b      	ldr	r3, [r3, #8]
200012a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200012a4:	633b      	str	r3, [r7, #48]	; 0x30
        if(0u == rx_fifo_empty)
200012a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200012a8:	2b00      	cmp	r3, #0
200012aa:	d11e      	bne.n	200012ea <MSS_SPI_transfer_block+0x1b6>
        {
            /* Process received byte. */
            rx_raw = this_spi->hw_reg->RX_DATA;
200012ac:	68fb      	ldr	r3, [r7, #12]
200012ae:	681b      	ldr	r3, [r3, #0]
200012b0:	691b      	ldr	r3, [r3, #16]
200012b2:	617b      	str	r3, [r7, #20]
            if(transfer_idx >= cmd_byte_size)
200012b4:	8b7a      	ldrh	r2, [r7, #26]
200012b6:	88fb      	ldrh	r3, [r7, #6]
200012b8:	429a      	cmp	r2, r3
200012ba:	d30e      	bcc.n	200012da <MSS_SPI_transfer_block+0x1a6>
            {
                if(rx_idx < rd_byte_size)
200012bc:	8bfa      	ldrh	r2, [r7, #30]
200012be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
200012c2:	429a      	cmp	r2, r3
200012c4:	d205      	bcs.n	200012d2 <MSS_SPI_transfer_block+0x19e>
                {
                    rd_buffer[rx_idx] = (uint8_t)rx_raw;   
200012c6:	8bfa      	ldrh	r2, [r7, #30]
200012c8:	683b      	ldr	r3, [r7, #0]
200012ca:	4413      	add	r3, r2
200012cc:	697a      	ldr	r2, [r7, #20]
200012ce:	b2d2      	uxtb	r2, r2
200012d0:	701a      	strb	r2, [r3, #0]
                }
                ++rx_idx;
200012d2:	8bfb      	ldrh	r3, [r7, #30]
200012d4:	f103 0301 	add.w	r3, r3, #1
200012d8:	83fb      	strh	r3, [r7, #30]
            }
            ++transfer_idx;
200012da:	8b7b      	ldrh	r3, [r7, #26]
200012dc:	f103 0301 	add.w	r3, r3, #1
200012e0:	837b      	strh	r3, [r7, #26]
            --transit;
200012e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
200012e4:	f103 33ff 	add.w	r3, r3, #4294967295
200012e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        tx_fifo_full = this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK;
200012ea:	68fb      	ldr	r3, [r7, #12]
200012ec:	681b      	ldr	r3, [r3, #0]
200012ee:	689b      	ldr	r3, [r3, #8]
200012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
200012f4:	62bb      	str	r3, [r7, #40]	; 0x28
        if(0u == tx_fifo_full)
200012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200012f8:	2b00      	cmp	r3, #0
200012fa:	d127      	bne.n	2000134c <MSS_SPI_transfer_block+0x218>
        {
            if(transit < RX_FIFO_SIZE)
200012fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
200012fe:	2b03      	cmp	r3, #3
20001300:	d824      	bhi.n	2000134c <MSS_SPI_transfer_block+0x218>
            {
                /* Send another byte. */
                if(tx_idx < cmd_byte_size)
20001302:	8bba      	ldrh	r2, [r7, #28]
20001304:	88fb      	ldrh	r3, [r7, #6]
20001306:	429a      	cmp	r2, r3
20001308:	d20f      	bcs.n	2000132a <MSS_SPI_transfer_block+0x1f6>
                {
                    this_spi->hw_reg->TX_DATA = cmd_buffer[tx_idx];
2000130a:	68fb      	ldr	r3, [r7, #12]
2000130c:	681b      	ldr	r3, [r3, #0]
2000130e:	8bb9      	ldrh	r1, [r7, #28]
20001310:	68ba      	ldr	r2, [r7, #8]
20001312:	440a      	add	r2, r1
20001314:	7812      	ldrb	r2, [r2, #0]
20001316:	615a      	str	r2, [r3, #20]
                    ++tx_idx;
20001318:	8bbb      	ldrh	r3, [r7, #28]
2000131a:	f103 0301 	add.w	r3, r3, #1
2000131e:	83bb      	strh	r3, [r7, #28]
                    ++transit;
20001320:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
20001322:	f103 0301 	add.w	r3, r3, #1
20001326:	84fb      	strh	r3, [r7, #38]	; 0x26
20001328:	e010      	b.n	2000134c <MSS_SPI_transfer_block+0x218>
                }
                else
                {
                    if(tx_idx < transfer_size)
2000132a:	8bba      	ldrh	r2, [r7, #28]
2000132c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
2000132e:	429a      	cmp	r2, r3
20001330:	d20c      	bcs.n	2000134c <MSS_SPI_transfer_block+0x218>
                    {
                        this_spi->hw_reg->TX_DATA = 0x00u;
20001332:	68fb      	ldr	r3, [r7, #12]
20001334:	681b      	ldr	r3, [r3, #0]
20001336:	f04f 0200 	mov.w	r2, #0
2000133a:	615a      	str	r2, [r3, #20]
                        ++tx_idx;
2000133c:	8bbb      	ldrh	r3, [r7, #28]
2000133e:	f103 0301 	add.w	r3, r3, #1
20001342:	83bb      	strh	r3, [r7, #28]
                        ++transit;
20001344:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
20001346:	f103 0301 	add.w	r3, r3, #1
2000134a:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
2000134c:	8b7a      	ldrh	r2, [r7, #26]
2000134e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
20001350:	429a      	cmp	r2, r3
20001352:	d3a2      	bcc.n	2000129a <MSS_SPI_transfer_block+0x166>
                    }
                }
            }
        }
    }
}
20001354:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001358:	46bd      	mov	sp, r7
2000135a:	bd80      	pop	{r7, pc}

2000135c <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
2000135c:	b480      	push	{r7}
2000135e:	b085      	sub	sp, #20
20001360:	af00      	add	r7, sp, #0
20001362:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
20001364:	f04f 0300 	mov.w	r3, #0
20001368:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000136a:	e00e      	b.n	2000138a <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
2000136c:	687b      	ldr	r3, [r7, #4]
2000136e:	681b      	ldr	r3, [r3, #0]
20001370:	687a      	ldr	r2, [r7, #4]
20001372:	6891      	ldr	r1, [r2, #8]
20001374:	687a      	ldr	r2, [r7, #4]
20001376:	6912      	ldr	r2, [r2, #16]
20001378:	440a      	add	r2, r1
2000137a:	7812      	ldrb	r2, [r2, #0]
2000137c:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
2000137e:	687b      	ldr	r3, [r7, #4]
20001380:	691b      	ldr	r3, [r3, #16]
20001382:	f103 0201 	add.w	r2, r3, #1
20001386:	687b      	ldr	r3, [r7, #4]
20001388:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000138a:	687b      	ldr	r3, [r7, #4]
2000138c:	681b      	ldr	r3, [r3, #0]
2000138e:	689b      	ldr	r3, [r3, #8]
20001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001394:	2b00      	cmp	r3, #0
20001396:	d105      	bne.n	200013a4 <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001398:	687b      	ldr	r3, [r7, #4]
2000139a:	691a      	ldr	r2, [r3, #16]
2000139c:	687b      	ldr	r3, [r7, #4]
2000139e:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200013a0:	429a      	cmp	r2, r3
200013a2:	d3e3      	bcc.n	2000136c <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
200013a4:	687b      	ldr	r3, [r7, #4]
200013a6:	691a      	ldr	r2, [r3, #16]
200013a8:	687b      	ldr	r3, [r7, #4]
200013aa:	68db      	ldr	r3, [r3, #12]
200013ac:	429a      	cmp	r2, r3
200013ae:	d31c      	bcc.n	200013ea <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200013b0:	e00e      	b.n	200013d0 <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
200013b2:	687b      	ldr	r3, [r7, #4]
200013b4:	681b      	ldr	r3, [r3, #0]
200013b6:	687a      	ldr	r2, [r7, #4]
200013b8:	6951      	ldr	r1, [r2, #20]
200013ba:	687a      	ldr	r2, [r7, #4]
200013bc:	69d2      	ldr	r2, [r2, #28]
200013be:	440a      	add	r2, r1
200013c0:	7812      	ldrb	r2, [r2, #0]
200013c2:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
200013c4:	687b      	ldr	r3, [r7, #4]
200013c6:	69db      	ldr	r3, [r3, #28]
200013c8:	f103 0201 	add.w	r2, r3, #1
200013cc:	687b      	ldr	r3, [r7, #4]
200013ce:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	681b      	ldr	r3, [r3, #0]
200013d4:	689b      	ldr	r3, [r3, #8]
200013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
200013da:	2b00      	cmp	r3, #0
200013dc:	d105      	bne.n	200013ea <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
200013de:	687b      	ldr	r3, [r7, #4]
200013e0:	69da      	ldr	r2, [r3, #28]
200013e2:	687b      	ldr	r3, [r7, #4]
200013e4:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200013e6:	429a      	cmp	r2, r3
200013e8:	d3e3      	bcc.n	200013b2 <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200013ea:	687b      	ldr	r3, [r7, #4]
200013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200013ee:	2b00      	cmp	r3, #0
200013f0:	d01f      	beq.n	20001432 <fill_slave_tx_fifo+0xd6>
200013f2:	687b      	ldr	r3, [r7, #4]
200013f4:	691a      	ldr	r2, [r3, #16]
200013f6:	687b      	ldr	r3, [r7, #4]
200013f8:	68db      	ldr	r3, [r3, #12]
200013fa:	429a      	cmp	r2, r3
200013fc:	d319      	bcc.n	20001432 <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
200013fe:	687b      	ldr	r3, [r7, #4]
20001400:	69da      	ldr	r2, [r3, #28]
20001402:	687b      	ldr	r3, [r7, #4]
20001404:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001406:	429a      	cmp	r2, r3
20001408:	d313      	bcc.n	20001432 <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000140a:	e008      	b.n	2000141e <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
2000140c:	687b      	ldr	r3, [r7, #4]
2000140e:	681b      	ldr	r3, [r3, #0]
20001410:	f04f 0200 	mov.w	r2, #0
20001414:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
20001416:	68fb      	ldr	r3, [r7, #12]
20001418:	f103 0301 	add.w	r3, r3, #1
2000141c:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000141e:	687b      	ldr	r3, [r7, #4]
20001420:	681b      	ldr	r3, [r3, #0]
20001422:	689b      	ldr	r3, [r3, #8]
20001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001428:	2b00      	cmp	r3, #0
2000142a:	d102      	bne.n	20001432 <fill_slave_tx_fifo+0xd6>
2000142c:	68fb      	ldr	r3, [r7, #12]
2000142e:	2b1f      	cmp	r3, #31
20001430:	d9ec      	bls.n	2000140c <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
20001432:	f107 0714 	add.w	r7, r7, #20
20001436:	46bd      	mov	sp, r7
20001438:	bc80      	pop	{r7}
2000143a:	4770      	bx	lr

2000143c <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
2000143c:	b580      	push	{r7, lr}
2000143e:	b084      	sub	sp, #16
20001440:	af00      	add	r7, sp, #0
20001442:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001444:	687b      	ldr	r3, [r7, #4]
20001446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000144a:	2b02      	cmp	r3, #2
2000144c:	d115      	bne.n	2000147a <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000144e:	e00c      	b.n	2000146a <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20001450:	687b      	ldr	r3, [r7, #4]
20001452:	681b      	ldr	r3, [r3, #0]
20001454:	691b      	ldr	r3, [r3, #16]
20001456:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
20001458:	687b      	ldr	r3, [r7, #4]
2000145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000145c:	2b00      	cmp	r3, #0
2000145e:	d004      	beq.n	2000146a <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
20001460:	687b      	ldr	r3, [r7, #4]
20001462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001464:	68fa      	ldr	r2, [r7, #12]
20001466:	4610      	mov	r0, r2
20001468:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000146a:	687b      	ldr	r3, [r7, #4]
2000146c:	681b      	ldr	r3, [r3, #0]
2000146e:	689b      	ldr	r3, [r3, #8]
20001470:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001474:	2b00      	cmp	r3, #0
20001476:	d0eb      	beq.n	20001450 <read_slave_rx_fifo+0x14>
20001478:	e032      	b.n	200014e0 <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
2000147a:	687b      	ldr	r3, [r7, #4]
2000147c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001480:	2b01      	cmp	r3, #1
20001482:	d125      	bne.n	200014d0 <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001484:	e017      	b.n	200014b6 <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20001486:	687b      	ldr	r3, [r7, #4]
20001488:	681b      	ldr	r3, [r3, #0]
2000148a:	691b      	ldr	r3, [r3, #16]
2000148c:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
2000148e:	687b      	ldr	r3, [r7, #4]
20001490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001492:	687b      	ldr	r3, [r7, #4]
20001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001496:	429a      	cmp	r2, r3
20001498:	d207      	bcs.n	200014aa <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
2000149a:	687b      	ldr	r3, [r7, #4]
2000149c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000149e:	687b      	ldr	r3, [r7, #4]
200014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200014a2:	4413      	add	r3, r2
200014a4:	68fa      	ldr	r2, [r7, #12]
200014a6:	b2d2      	uxtb	r2, r2
200014a8:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
200014aa:	687b      	ldr	r3, [r7, #4]
200014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200014ae:	f103 0201 	add.w	r2, r3, #1
200014b2:	687b      	ldr	r3, [r7, #4]
200014b4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200014b6:	687b      	ldr	r3, [r7, #4]
200014b8:	681b      	ldr	r3, [r3, #0]
200014ba:	689b      	ldr	r3, [r3, #8]
200014bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
200014c0:	2b00      	cmp	r3, #0
200014c2:	d0e0      	beq.n	20001486 <read_slave_rx_fifo+0x4a>
200014c4:	e00c      	b.n	200014e0 <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200014c6:	687b      	ldr	r3, [r7, #4]
200014c8:	681b      	ldr	r3, [r3, #0]
200014ca:	691b      	ldr	r3, [r3, #16]
200014cc:	60fb      	str	r3, [r7, #12]
200014ce:	e000      	b.n	200014d2 <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200014d0:	bf00      	nop
200014d2:	687b      	ldr	r3, [r7, #4]
200014d4:	681b      	ldr	r3, [r3, #0]
200014d6:	689b      	ldr	r3, [r3, #8]
200014d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200014dc:	2b00      	cmp	r3, #0
200014de:	d0f2      	beq.n	200014c6 <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
200014e0:	f107 0710 	add.w	r7, r7, #16
200014e4:	46bd      	mov	sp, r7
200014e6:	bd80      	pop	{r7, pc}

200014e8 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
200014e8:	b580      	push	{r7, lr}
200014ea:	b086      	sub	sp, #24
200014ec:	af00      	add	r7, sp, #0
200014ee:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
200014f0:	687b      	ldr	r3, [r7, #4]
200014f2:	681b      	ldr	r3, [r3, #0]
200014f4:	f103 0320 	add.w	r3, r3, #32
200014f8:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200014fa:	687a      	ldr	r2, [r7, #4]
200014fc:	f641 13e4 	movw	r3, #6628	; 0x19e4
20001500:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001504:	429a      	cmp	r2, r3
20001506:	d007      	beq.n	20001518 <mss_spi_isr+0x30>
20001508:	687a      	ldr	r2, [r7, #4]
2000150a:	f641 1360 	movw	r3, #6496	; 0x1960
2000150e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001512:	429a      	cmp	r2, r3
20001514:	d000      	beq.n	20001518 <mss_spi_isr+0x30>
20001516:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20001518:	693b      	ldr	r3, [r7, #16]
2000151a:	681b      	ldr	r3, [r3, #0]
2000151c:	f003 0302 	and.w	r3, r3, #2
20001520:	2b00      	cmp	r3, #0
20001522:	d052      	beq.n	200015ca <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001524:	687b      	ldr	r3, [r7, #4]
20001526:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000152a:	2b02      	cmp	r3, #2
2000152c:	d115      	bne.n	2000155a <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000152e:	e00c      	b.n	2000154a <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001530:	687b      	ldr	r3, [r7, #4]
20001532:	681b      	ldr	r3, [r3, #0]
20001534:	691b      	ldr	r3, [r3, #16]
20001536:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
20001538:	687b      	ldr	r3, [r7, #4]
2000153a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000153c:	2b00      	cmp	r3, #0
2000153e:	d004      	beq.n	2000154a <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
20001540:	687b      	ldr	r3, [r7, #4]
20001542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001544:	68fa      	ldr	r2, [r7, #12]
20001546:	4610      	mov	r0, r2
20001548:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000154a:	687b      	ldr	r3, [r7, #4]
2000154c:	681b      	ldr	r3, [r3, #0]
2000154e:	689b      	ldr	r3, [r3, #8]
20001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001554:	2b00      	cmp	r3, #0
20001556:	d0eb      	beq.n	20001530 <mss_spi_isr+0x48>
20001558:	e032      	b.n	200015c0 <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
2000155a:	687b      	ldr	r3, [r7, #4]
2000155c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001560:	2b01      	cmp	r3, #1
20001562:	d125      	bne.n	200015b0 <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001564:	e017      	b.n	20001596 <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
20001566:	687b      	ldr	r3, [r7, #4]
20001568:	681b      	ldr	r3, [r3, #0]
2000156a:	691b      	ldr	r3, [r3, #16]
2000156c:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
2000156e:	687b      	ldr	r3, [r7, #4]
20001570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001572:	687b      	ldr	r3, [r7, #4]
20001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001576:	429a      	cmp	r2, r3
20001578:	d207      	bcs.n	2000158a <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
2000157a:	687b      	ldr	r3, [r7, #4]
2000157c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000157e:	687b      	ldr	r3, [r7, #4]
20001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001582:	4413      	add	r3, r2
20001584:	68fa      	ldr	r2, [r7, #12]
20001586:	b2d2      	uxtb	r2, r2
20001588:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
2000158a:	687b      	ldr	r3, [r7, #4]
2000158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000158e:	f103 0201 	add.w	r2, r3, #1
20001592:	687b      	ldr	r3, [r7, #4]
20001594:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001596:	687b      	ldr	r3, [r7, #4]
20001598:	681b      	ldr	r3, [r3, #0]
2000159a:	689b      	ldr	r3, [r3, #8]
2000159c:	f003 0340 	and.w	r3, r3, #64	; 0x40
200015a0:	2b00      	cmp	r3, #0
200015a2:	d0e0      	beq.n	20001566 <mss_spi_isr+0x7e>
200015a4:	e00c      	b.n	200015c0 <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
200015a6:	687b      	ldr	r3, [r7, #4]
200015a8:	681b      	ldr	r3, [r3, #0]
200015aa:	691b      	ldr	r3, [r3, #16]
200015ac:	60fb      	str	r3, [r7, #12]
200015ae:	e000      	b.n	200015b2 <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200015b0:	bf00      	nop
200015b2:	687b      	ldr	r3, [r7, #4]
200015b4:	681b      	ldr	r3, [r3, #0]
200015b6:	689b      	ldr	r3, [r3, #8]
200015b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200015bc:	2b00      	cmp	r3, #0
200015be:	d0f2      	beq.n	200015a6 <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
200015c0:	687b      	ldr	r3, [r7, #4]
200015c2:	681b      	ldr	r3, [r3, #0]
200015c4:	f04f 0202 	mov.w	r2, #2
200015c8:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
200015ca:	693b      	ldr	r3, [r7, #16]
200015cc:	681b      	ldr	r3, [r3, #0]
200015ce:	f003 0301 	and.w	r3, r3, #1
200015d2:	b2db      	uxtb	r3, r3
200015d4:	2b00      	cmp	r3, #0
200015d6:	d012      	beq.n	200015fe <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
200015d8:	687b      	ldr	r3, [r7, #4]
200015da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200015de:	2b02      	cmp	r3, #2
200015e0:	d105      	bne.n	200015ee <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200015e2:	687b      	ldr	r3, [r7, #4]
200015e4:	681b      	ldr	r3, [r3, #0]
200015e6:	687a      	ldr	r2, [r7, #4]
200015e8:	6f92      	ldr	r2, [r2, #120]	; 0x78
200015ea:	615a      	str	r2, [r3, #20]
200015ec:	e002      	b.n	200015f4 <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
200015ee:	6878      	ldr	r0, [r7, #4]
200015f0:	f7ff feb4 	bl	2000135c <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
200015f4:	687b      	ldr	r3, [r7, #4]
200015f6:	681b      	ldr	r3, [r3, #0]
200015f8:	f04f 0201 	mov.w	r2, #1
200015fc:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
200015fe:	693b      	ldr	r3, [r7, #16]
20001600:	681b      	ldr	r3, [r3, #0]
20001602:	f003 0310 	and.w	r3, r3, #16
20001606:	2b00      	cmp	r3, #0
20001608:	d023      	beq.n	20001652 <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
2000160a:	6878      	ldr	r0, [r7, #4]
2000160c:	f7ff ff16 	bl	2000143c <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20001610:	687b      	ldr	r3, [r7, #4]
20001612:	6a1b      	ldr	r3, [r3, #32]
20001614:	2b00      	cmp	r3, #0
20001616:	d00b      	beq.n	20001630 <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20001618:	687b      	ldr	r3, [r7, #4]
2000161a:	6a1b      	ldr	r3, [r3, #32]
2000161c:	687a      	ldr	r2, [r7, #4]
2000161e:	6a91      	ldr	r1, [r2, #40]	; 0x28
20001620:	687a      	ldr	r2, [r7, #4]
20001622:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001624:	4608      	mov	r0, r1
20001626:	4611      	mov	r1, r2
20001628:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
2000162a:	6878      	ldr	r0, [r7, #4]
2000162c:	f7ff fe96 	bl	2000135c <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20001630:	687b      	ldr	r3, [r7, #4]
20001632:	f04f 0201 	mov.w	r2, #1
20001636:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	681b      	ldr	r3, [r3, #0]
2000163c:	687a      	ldr	r2, [r7, #4]
2000163e:	6812      	ldr	r2, [r2, #0]
20001640:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001642:	f022 0210 	bic.w	r2, r2, #16
20001646:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001648:	687b      	ldr	r3, [r7, #4]
2000164a:	681b      	ldr	r3, [r3, #0]
2000164c:	f04f 0210 	mov.w	r2, #16
20001650:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
20001652:	693b      	ldr	r3, [r7, #16]
20001654:	681b      	ldr	r3, [r3, #0]
20001656:	f003 0304 	and.w	r3, r3, #4
2000165a:	2b00      	cmp	r3, #0
2000165c:	d00f      	beq.n	2000167e <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
2000165e:	687b      	ldr	r3, [r7, #4]
20001660:	681b      	ldr	r3, [r3, #0]
20001662:	687a      	ldr	r2, [r7, #4]
20001664:	6812      	ldr	r2, [r2, #0]
20001666:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001668:	f042 0204 	orr.w	r2, r2, #4
2000166c:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
2000166e:	6878      	ldr	r0, [r7, #4]
20001670:	f7ff fb54 	bl	20000d1c <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
20001674:	687b      	ldr	r3, [r7, #4]
20001676:	681b      	ldr	r3, [r3, #0]
20001678:	f04f 0204 	mov.w	r2, #4
2000167c:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
2000167e:	693b      	ldr	r3, [r7, #16]
20001680:	681b      	ldr	r3, [r3, #0]
20001682:	f003 0308 	and.w	r3, r3, #8
20001686:	2b00      	cmp	r3, #0
20001688:	d031      	beq.n	200016ee <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
2000168a:	687b      	ldr	r3, [r7, #4]
2000168c:	681b      	ldr	r3, [r3, #0]
2000168e:	687a      	ldr	r2, [r7, #4]
20001690:	6812      	ldr	r2, [r2, #0]
20001692:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001694:	f042 0208 	orr.w	r2, r2, #8
20001698:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
2000169a:	687b      	ldr	r3, [r7, #4]
2000169c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200016a0:	2b02      	cmp	r3, #2
200016a2:	d113      	bne.n	200016cc <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
200016a4:	687b      	ldr	r3, [r7, #4]
200016a6:	681a      	ldr	r2, [r3, #0]
200016a8:	687b      	ldr	r3, [r7, #4]
200016aa:	681b      	ldr	r3, [r3, #0]
200016ac:	6819      	ldr	r1, [r3, #0]
200016ae:	f240 03ff 	movw	r3, #255	; 0xff
200016b2:	f6cf 7300 	movt	r3, #65280	; 0xff00
200016b6:	ea01 0303 	and.w	r3, r1, r3
200016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200016be:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200016c0:	687b      	ldr	r3, [r7, #4]
200016c2:	681b      	ldr	r3, [r3, #0]
200016c4:	687a      	ldr	r2, [r7, #4]
200016c6:	6f92      	ldr	r2, [r2, #120]	; 0x78
200016c8:	615a      	str	r2, [r3, #20]
200016ca:	e00b      	b.n	200016e4 <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200016d2:	2b01      	cmp	r3, #1
200016d4:	d106      	bne.n	200016e4 <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
200016d6:	687b      	ldr	r3, [r7, #4]
200016d8:	f04f 0200 	mov.w	r2, #0
200016dc:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
200016de:	6878      	ldr	r0, [r7, #4]
200016e0:	f7ff fe3c 	bl	2000135c <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
200016e4:	687b      	ldr	r3, [r7, #4]
200016e6:	681b      	ldr	r3, [r3, #0]
200016e8:	f04f 0208 	mov.w	r2, #8
200016ec:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
200016ee:	693b      	ldr	r3, [r7, #16]
200016f0:	681b      	ldr	r3, [r3, #0]
200016f2:	f003 0320 	and.w	r3, r3, #32
200016f6:	2b00      	cmp	r3, #0
200016f8:	d049      	beq.n	2000178e <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
200016fa:	6878      	ldr	r0, [r7, #4]
200016fc:	f7ff fe9e 	bl	2000143c <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001704:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
20001706:	687b      	ldr	r3, [r7, #4]
20001708:	6a1b      	ldr	r3, [r3, #32]
2000170a:	2b00      	cmp	r3, #0
2000170c:	d01c      	beq.n	20001748 <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
2000170e:	687b      	ldr	r3, [r7, #4]
20001710:	f04f 0200 	mov.w	r2, #0
20001714:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
20001716:	687b      	ldr	r3, [r7, #4]
20001718:	f04f 0200 	mov.w	r2, #0
2000171c:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
2000171e:	687b      	ldr	r3, [r7, #4]
20001720:	f04f 0200 	mov.w	r2, #0
20001724:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
20001726:	687b      	ldr	r3, [r7, #4]
20001728:	f04f 0200 	mov.w	r2, #0
2000172c:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
2000172e:	687b      	ldr	r3, [r7, #4]
20001730:	681b      	ldr	r3, [r3, #0]
20001732:	f04f 0210 	mov.w	r2, #16
20001736:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20001738:	687b      	ldr	r3, [r7, #4]
2000173a:	681b      	ldr	r3, [r3, #0]
2000173c:	687a      	ldr	r2, [r7, #4]
2000173e:	6812      	ldr	r2, [r2, #0]
20001740:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001742:	f042 0210 	orr.w	r2, r2, #16
20001746:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
20001748:	687b      	ldr	r3, [r7, #4]
2000174a:	f04f 0200 	mov.w	r2, #0
2000174e:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001750:	687b      	ldr	r3, [r7, #4]
20001752:	681b      	ldr	r3, [r3, #0]
20001754:	687a      	ldr	r2, [r7, #4]
20001756:	6812      	ldr	r2, [r2, #0]
20001758:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000175a:	f042 020c 	orr.w	r2, r2, #12
2000175e:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
20001760:	6878      	ldr	r0, [r7, #4]
20001762:	f7ff fdfb 	bl	2000135c <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20001766:	687b      	ldr	r3, [r7, #4]
20001768:	f04f 0200 	mov.w	r2, #0
2000176c:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20001772:	2b00      	cmp	r3, #0
20001774:	d006      	beq.n	20001784 <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
20001776:	687b      	ldr	r3, [r7, #4]
20001778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2000177a:	687a      	ldr	r2, [r7, #4]
2000177c:	6a92      	ldr	r2, [r2, #40]	; 0x28
2000177e:	4610      	mov	r0, r2
20001780:	6979      	ldr	r1, [r7, #20]
20001782:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
20001784:	687b      	ldr	r3, [r7, #4]
20001786:	681b      	ldr	r3, [r3, #0]
20001788:	f04f 0220 	mov.w	r2, #32
2000178c:	60da      	str	r2, [r3, #12]
    }
}
2000178e:	f107 0718 	add.w	r7, r7, #24
20001792:	46bd      	mov	sp, r7
20001794:	bd80      	pop	{r7, pc}
20001796:	bf00      	nop

20001798 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20001798:	4668      	mov	r0, sp
2000179a:	f020 0107 	bic.w	r1, r0, #7
2000179e:	468d      	mov	sp, r1
200017a0:	b589      	push	{r0, r3, r7, lr}
200017a2:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
200017a4:	f641 10e4 	movw	r0, #6628	; 0x19e4
200017a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017ac:	f7ff fe9c 	bl	200014e8 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI0_IRQn);
200017b0:	f04f 000c 	mov.w	r0, #12
200017b4:	f7ff f9fa 	bl	20000bac <NVIC_ClearPendingIRQ>
}
200017b8:	46bd      	mov	sp, r7
200017ba:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017be:	4685      	mov	sp, r0
200017c0:	4770      	bx	lr
200017c2:	bf00      	nop

200017c4 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
200017c4:	4668      	mov	r0, sp
200017c6:	f020 0107 	bic.w	r1, r0, #7
200017ca:	468d      	mov	sp, r1
200017cc:	b589      	push	{r0, r3, r7, lr}
200017ce:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
200017d0:	f641 1060 	movw	r0, #6496	; 0x1960
200017d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017d8:	f7ff fe86 	bl	200014e8 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI1_IRQn);
200017dc:	f04f 000d 	mov.w	r0, #13
200017e0:	f7ff f9e4 	bl	20000bac <NVIC_ClearPendingIRQ>
}
200017e4:	46bd      	mov	sp, r7
200017e6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017ea:	4685      	mov	sp, r0
200017ec:	4770      	bx	lr
200017ee:	bf00      	nop

200017f0 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
200017f0:	b480      	push	{r7}
200017f2:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
200017f4:	46bd      	mov	sp, r7
200017f6:	bc80      	pop	{r7}
200017f8:	4770      	bx	lr
200017fa:	bf00      	nop

200017fc <__libc_init_array>:
200017fc:	b570      	push	{r4, r5, r6, lr}
200017fe:	f641 1638 	movw	r6, #6456	; 0x1938
20001802:	f641 1538 	movw	r5, #6456	; 0x1938
20001806:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000180a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000180e:	1b76      	subs	r6, r6, r5
20001810:	10b6      	asrs	r6, r6, #2
20001812:	d006      	beq.n	20001822 <__libc_init_array+0x26>
20001814:	2400      	movs	r4, #0
20001816:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000181a:	3401      	adds	r4, #1
2000181c:	4798      	blx	r3
2000181e:	42a6      	cmp	r6, r4
20001820:	d8f9      	bhi.n	20001816 <__libc_init_array+0x1a>
20001822:	f641 1538 	movw	r5, #6456	; 0x1938
20001826:	f641 163c 	movw	r6, #6460	; 0x193c
2000182a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000182e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20001832:	1b76      	subs	r6, r6, r5
20001834:	f000 f874 	bl	20001920 <_init>
20001838:	10b6      	asrs	r6, r6, #2
2000183a:	d006      	beq.n	2000184a <__libc_init_array+0x4e>
2000183c:	2400      	movs	r4, #0
2000183e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001842:	3401      	adds	r4, #1
20001844:	4798      	blx	r3
20001846:	42a6      	cmp	r6, r4
20001848:	d8f9      	bhi.n	2000183e <__libc_init_array+0x42>
2000184a:	bd70      	pop	{r4, r5, r6, pc}

2000184c <memset>:
2000184c:	2a03      	cmp	r2, #3
2000184e:	b2c9      	uxtb	r1, r1
20001850:	b430      	push	{r4, r5}
20001852:	d807      	bhi.n	20001864 <memset+0x18>
20001854:	b122      	cbz	r2, 20001860 <memset+0x14>
20001856:	2300      	movs	r3, #0
20001858:	54c1      	strb	r1, [r0, r3]
2000185a:	3301      	adds	r3, #1
2000185c:	4293      	cmp	r3, r2
2000185e:	d1fb      	bne.n	20001858 <memset+0xc>
20001860:	bc30      	pop	{r4, r5}
20001862:	4770      	bx	lr
20001864:	eb00 0c02 	add.w	ip, r0, r2
20001868:	4603      	mov	r3, r0
2000186a:	e001      	b.n	20001870 <memset+0x24>
2000186c:	f803 1c01 	strb.w	r1, [r3, #-1]
20001870:	f003 0403 	and.w	r4, r3, #3
20001874:	461a      	mov	r2, r3
20001876:	3301      	adds	r3, #1
20001878:	2c00      	cmp	r4, #0
2000187a:	d1f7      	bne.n	2000186c <memset+0x20>
2000187c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20001880:	ebc2 040c 	rsb	r4, r2, ip
20001884:	fb03 f301 	mul.w	r3, r3, r1
20001888:	e01f      	b.n	200018ca <memset+0x7e>
2000188a:	f842 3c40 	str.w	r3, [r2, #-64]
2000188e:	f842 3c3c 	str.w	r3, [r2, #-60]
20001892:	f842 3c38 	str.w	r3, [r2, #-56]
20001896:	f842 3c34 	str.w	r3, [r2, #-52]
2000189a:	f842 3c30 	str.w	r3, [r2, #-48]
2000189e:	f842 3c2c 	str.w	r3, [r2, #-44]
200018a2:	f842 3c28 	str.w	r3, [r2, #-40]
200018a6:	f842 3c24 	str.w	r3, [r2, #-36]
200018aa:	f842 3c20 	str.w	r3, [r2, #-32]
200018ae:	f842 3c1c 	str.w	r3, [r2, #-28]
200018b2:	f842 3c18 	str.w	r3, [r2, #-24]
200018b6:	f842 3c14 	str.w	r3, [r2, #-20]
200018ba:	f842 3c10 	str.w	r3, [r2, #-16]
200018be:	f842 3c0c 	str.w	r3, [r2, #-12]
200018c2:	f842 3c08 	str.w	r3, [r2, #-8]
200018c6:	f842 3c04 	str.w	r3, [r2, #-4]
200018ca:	4615      	mov	r5, r2
200018cc:	3240      	adds	r2, #64	; 0x40
200018ce:	2c3f      	cmp	r4, #63	; 0x3f
200018d0:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200018d4:	dcd9      	bgt.n	2000188a <memset+0x3e>
200018d6:	462a      	mov	r2, r5
200018d8:	ebc5 040c 	rsb	r4, r5, ip
200018dc:	e007      	b.n	200018ee <memset+0xa2>
200018de:	f842 3c10 	str.w	r3, [r2, #-16]
200018e2:	f842 3c0c 	str.w	r3, [r2, #-12]
200018e6:	f842 3c08 	str.w	r3, [r2, #-8]
200018ea:	f842 3c04 	str.w	r3, [r2, #-4]
200018ee:	4615      	mov	r5, r2
200018f0:	3210      	adds	r2, #16
200018f2:	2c0f      	cmp	r4, #15
200018f4:	f1a4 0410 	sub.w	r4, r4, #16
200018f8:	dcf1      	bgt.n	200018de <memset+0x92>
200018fa:	462a      	mov	r2, r5
200018fc:	ebc5 050c 	rsb	r5, r5, ip
20001900:	e001      	b.n	20001906 <memset+0xba>
20001902:	f842 3c04 	str.w	r3, [r2, #-4]
20001906:	4614      	mov	r4, r2
20001908:	3204      	adds	r2, #4
2000190a:	2d03      	cmp	r5, #3
2000190c:	f1a5 0504 	sub.w	r5, r5, #4
20001910:	dcf7      	bgt.n	20001902 <memset+0xb6>
20001912:	e001      	b.n	20001918 <memset+0xcc>
20001914:	f804 1b01 	strb.w	r1, [r4], #1
20001918:	4564      	cmp	r4, ip
2000191a:	d3fb      	bcc.n	20001914 <memset+0xc8>
2000191c:	e7a0      	b.n	20001860 <memset+0x14>
2000191e:	bf00      	nop

20001920 <_init>:
20001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001922:	bf00      	nop
20001924:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001926:	bc08      	pop	{r3}
20001928:	469e      	mov	lr, r3
2000192a:	4770      	bx	lr

2000192c <_fini>:
2000192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000192e:	bf00      	nop
20001930:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001932:	bc08      	pop	{r3}
20001934:	469e      	mov	lr, r3
20001936:	4770      	bx	lr

20001938 <__frame_dummy_init_array_entry>:
20001938:	0485 2000                                   ... 

2000193c <__do_global_dtors_aux_fini_array_entry>:
2000193c:	0471 2000                                   q.. 
